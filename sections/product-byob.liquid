{% comment %} default section {% endcomment %}

<link rel="stylesheet" href="{{ 'product-byob.css' | asset_url }}">

<div class="bundlesuite-container">
  <div class="banner-image">
    <img
      src="https://s3-alpha-sig.figma.com/img/887a/054d/fce13d95ea9bfebf16ec9a02f5d7a9a4?Expires=1734912000&Key-Pair-Id=APKAQ4GOSFWCVNEHN3O4&Signature=QVweIohtsK8EJ2Akk4~c5jRH75DBXwBXVbgtHVuuuw~gNJ9TNT0nCNY5LE0xpi-N0~slx0Glnje5iaWF~ca9k6I88O9g8K7d7g2rk8bXNUXtqZCQbipiFL4pPvzzpuCrV-TDJassGE1hn1HZB8mbZGdlu5kYTE9WbxGoBZPpUhVNmMCmOnGqbzxqHFn1Q~su8oESCn3-paTGI1qh~kVDs8jr~k1wuNksPE5L0Ua-qvkmrwijunummMrgy-u85euJvS0BE-hY7-~LuHNAI9mEGmu-rYPdd1ty-~VCGp-3vfeIcnsEy~ZKtF~K0swDWl1nrDc4yZoD8nem8PvFdioTig__"
      height="100%"
      width="100%"
      alt=""
    >
  </div>

  <div class="bundlesuite-container-content">
    <div class="template-top-data">
      <div class="template-top-data-header">
        <div class="template-top-data-header-title">
          <h2>Build your BundleSuite</h2>
        </div>
        <div class="template-top-data-header-description">
          <p>
            Build your snack box by selecting any 5 products from 6 products and get discount for more products you add.
          </p>
        </div>
      </div>
      <div class="template-top-data-discount-info">
        <div class="discount-info-item">
          <div class="discount-info-item-title">
            <h3>15% off</h3>
          </div>
          <div class="discount-info-item-description">
            <p>1 Product</p>
          </div>
        </div>
        <div class="discount-info-item">
          <div class="discount-info-item-title">
            <h3>15% off</h3>
          </div>
          <div class="discount-info-item-description">
            <p>1 Product</p>
          </div>
        </div>
      </div>
    </div>

    <div class="template-product-discount-container">
      <div class="product-variant-selector closed">
        <div class="product-variant-selector-wrapper">
          <div class="close-variant-selector">
            <button>
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect width="24" height="24" rx="12" fill="#0F0F0F"/>
                <path d="M14.8281 9.17188L9.17127 14.8287" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M9.17188 9.17188L14.8287 14.8287" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button>
          </div>

          <div class="product-variant-selector-content">
            <div class="product-variant-selector-header">
              <div class="product-variant-selector-header-title">
                <h3>Art De La Table bainville t-shirt</h3>
              </div>
              <div class="product-variant-selector-header-image">
                <img
                  src="https://cdn.shopify.com/s/files/1/0915/6725/9955/files/image.png?v=1734352604"
                  alt=""
                  width="100%"
                  height="100%"
                >
              </div>
            </div>
          </div>

          <div class="product-variant-selector-colors product-variant-selector-section">
            <div class="pvsc-header color-header">
              <p>Select a colour variation for the selected product</p>
            </div>
            <div class="pvsc-items-container color-items-container">
              <div class="pvsc-item">
                <div class="pvsc-item-image">
                  <img
                    src="https://cdn.shopify.com/s/files/1/0915/6725/9955/files/image.png?v=1734352604"
                    alt=""
                    width="100%"
                    height="100%"
                  >
                </div>
                <div class="pvsc-item-title">
                  <h4>Forest green</h4>
                </div>
              </div>
              <div class="pvsc-item">
                <div class="pvsc-item-image">
                  <img
                    src="https://cdn.shopify.com/s/files/1/0915/6725/9955/files/image.png?v=1734352604"
                    alt=""
                    width="100%"
                    height="100%"
                  >
                </div>
                <div class="pvsc-item-title">
                  <h4>Forest green</h4>
                </div>
              </div>
              <div class="pvsc-item">
                <div class="pvsc-item-image">
                  <img
                    src="https://cdn.shopify.com/s/files/1/0915/6725/9955/files/image.png?v=1734352604"
                    alt=""
                    width="100%"
                    height="100%"
                  >
                </div>
                <div class="pvsc-item-title">
                  <h4>Forest green</h4>
                </div>
              </div>
            </div>
          </div>

          <div class="product-variant-selector-size product-variant-selector-section">
            <div class="pvsc-header size-header">
              <p>Select a size variation for the selected product</p>
            </div>
            <div class="pvsc-items-container size-items-container">
              <div class="pvsc-item">
                <div class="size">
                  <p>S</p>
                </div>
              </div>
              <div class="pvsc-item selected">
                <div class="size">
                  <p>S</p>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="product-variant-selector-cta">
          <button>select variant</button>
        </div>
      </div>
      <div class="tpdc-wrapper">
        <div class="main-product-content-container">
          <div class="discount-stepper-container">
            <div class="discount-stepper">
              <div class="discount-stepper-item active">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
              <div class="discount-stepper-item active">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
              <div class="discount-stepper-item">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
              <div class="discount-stepper-item">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
            </div>

            <div class="discount-info-container">
              <div class="discount-info-container-header">
                <h3>
                  <svg width="19" height="24" viewBox="0 0 19 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M1.6 23.32C1.57333 23.3467 1.46667 23.3067 1.28 23.2C1.12 23.12 0.973333 23.0267 0.84 22.92C0.706667 22.8133 0.653333 22.7467 0.68 22.72L17.88 0.96C17.9333 0.879999 18.04 0.893333 18.2 1C18.36 1.08 18.5067 1.18666 18.64 1.32C18.7733 1.45333 18.8133 1.54667 18.76 1.6L1.6 23.32ZM13.08 23.2C11.8267 23.2 10.8667 22.7067 10.2 21.72C9.56 20.7067 9.37333 19.48 9.64 18.04C9.8 17.08 10.1333 16.2133 10.64 15.44C11.1467 14.6667 11.7733 14.0533 12.52 13.6C13.2667 13.1467 14.0533 12.92 14.88 12.92C16.1067 12.92 17.0267 13.4267 17.64 14.44C18.28 15.4533 18.4667 16.6667 18.2 18.08C17.9333 19.52 17.32 20.7333 16.36 21.72C15.4267 22.7067 14.3333 23.2 13.08 23.2ZM13.4 22.6C14.2 22.6 14.76 22.2 15.08 21.4C15.4267 20.6 15.68 19.5867 15.84 18.36C16.08 16.76 16.08 15.56 15.84 14.76C15.6267 13.9333 15.2 13.52 14.56 13.52C13.7867 13.52 13.2 13.9467 12.8 14.8C12.4267 15.6267 12.16 16.6533 12 17.88C11.76 19.2133 11.7333 20.3333 11.92 21.24C12.1067 22.1467 12.6 22.6 13.4 22.6ZM5.28 10.88C4.02667 10.88 3.08 10.3867 2.44 9.4C1.8 8.38667 1.61333 7.14667 1.88 5.68C2.04 4.74667 2.37333 3.89333 2.88 3.12C3.38667 2.34667 4.01333 1.73333 4.76 1.28C5.50667 0.826666 6.29333 0.6 7.12 0.6C8.37333 0.6 9.30667 1.10667 9.92 2.12C10.5333 3.13333 10.7067 4.36 10.44 5.8C10.1733 7.21333 9.56 8.41333 8.6 9.4C7.64 10.3867 6.53333 10.88 5.28 10.88ZM5.6 10.32C6.37333 10.32 6.92 9.92 7.24 9.12C7.58667 8.32 7.85333 7.30667 8.04 6.08C8.30667 4.48 8.32 3.26667 8.08 2.44C7.86667 1.61333 7.44 1.2 6.8 1.2C6 1.2 5.41333 1.62667 5.04 2.48C4.66667 3.33333 4.38667 4.36 4.2 5.56C3.98667 6.89333 3.97333 8.02667 4.16 8.96C4.34667 9.86667 4.82667 10.32 5.6 10.32Z" fill="white"/>
                  </svg>
                  Add 2 more items for maximum discount of 35%!
                </h3>
              </div>
            </div>
          </div>

          <div class="main-wrapper">
            <div class="collection-info-container">
              <div class="collection-info-container-header">
                <h3 data-bundle-header>Choose products from any two collections</h3>
              </div>
              <div class="collection-info-container-content">
                <p data-bundle-description>Select collections to view all the available products in one list.</p>
              </div>
            </div>

            <div class="collection-tab-links-container">
              <div class="tab-link-item">
                <p>Collection 1</p>
              </div>
              <div class="tab-link-item">
                <p>Collection 2</p>
              </div>
            </div>

            <div class="collection-tab-content-container">
              <div class="collection-tab-content-item">
                <div class="collection-products-container-header">
                  <p>(6 Products)</p>
                </div>
                <div class="collection-products-container">loading...</div>
              </div>
            </div>
          </div>
        </div>

        <div class="side-cart-container">
          <div class="side-cart-header">
            <div class="cart-head">
              <h3>Cart</h3>
            </div>
            <div class="cart-totoal-added-products">
              <p><span class="added-products-count">0</span> / <span class="total-products-count">0</span> products</p>
            </div>
          </div>

          <div class="side-cart-stepper">
            <div class="discount-stepper small">
              <div class="discount-stepper-item active">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
              <div class="discount-stepper-item active">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
              <div class="discount-stepper-item">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
              <div class="discount-stepper-item">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
            </div>

            <div class="discount-info-container small">
              <div class="discount-info-container-header">
                <h3>
                  <svg width="19" height="24" viewBox="0 0 19 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M1.6 23.32C1.57333 23.3467 1.46667 23.3067 1.28 23.2C1.12 23.12 0.973333 23.0267 0.84 22.92C0.706667 22.8133 0.653333 22.7467 0.68 22.72L17.88 0.96C17.9333 0.879999 18.04 0.893333 18.2 1C18.36 1.08 18.5067 1.18666 18.64 1.32C18.7733 1.45333 18.8133 1.54667 18.76 1.6L1.6 23.32ZM13.08 23.2C11.8267 23.2 10.8667 22.7067 10.2 21.72C9.56 20.7067 9.37333 19.48 9.64 18.04C9.8 17.08 10.1333 16.2133 10.64 15.44C11.1467 14.6667 11.7733 14.0533 12.52 13.6C13.2667 13.1467 14.0533 12.92 14.88 12.92C16.1067 12.92 17.0267 13.4267 17.64 14.44C18.28 15.4533 18.4667 16.6667 18.2 18.08C17.9333 19.52 17.32 20.7333 16.36 21.72C15.4267 22.7067 14.3333 23.2 13.08 23.2ZM13.4 22.6C14.2 22.6 14.76 22.2 15.08 21.4C15.4267 20.6 15.68 19.5867 15.84 18.36C16.08 16.76 16.08 15.56 15.84 14.76C15.6267 13.9333 15.2 13.52 14.56 13.52C13.7867 13.52 13.2 13.9467 12.8 14.8C12.4267 15.6267 12.16 16.6533 12 17.88C11.76 19.2133 11.7333 20.3333 11.92 21.24C12.1067 22.1467 12.6 22.6 13.4 22.6ZM5.28 10.88C4.02667 10.88 3.08 10.3867 2.44 9.4C1.8 8.38667 1.61333 7.14667 1.88 5.68C2.04 4.74667 2.37333 3.89333 2.88 3.12C3.38667 2.34667 4.01333 1.73333 4.76 1.28C5.50667 0.826666 6.29333 0.6 7.12 0.6C8.37333 0.6 9.30667 1.10667 9.92 2.12C10.5333 3.13333 10.7067 4.36 10.44 5.8C10.1733 7.21333 9.56 8.41333 8.6 9.4C7.64 10.3867 6.53333 10.88 5.28 10.88ZM5.6 10.32C6.37333 10.32 6.92 9.92 7.24 9.12C7.58667 8.32 7.85333 7.30667 8.04 6.08C8.30667 4.48 8.32 3.26667 8.08 2.44C7.86667 1.61333 7.44 1.2 6.8 1.2C6 1.2 5.41333 1.62667 5.04 2.48C4.66667 3.33333 4.38667 4.36 4.2 5.56C3.98667 6.89333 3.97333 8.02667 4.16 8.96C4.34667 9.86667 4.82667 10.32 5.6 10.32Z" fill="white"/>
                  </svg>
                  Add 2 more items for maximum discount of 35%!
                </h3>
              </div>
            </div>
          </div>

          <div class="side-cart-product-container">
            <div class="side-cart-products">Cart empty</div>
          </div>

          <div class="side-cart-checkout">
            <div class="side-cart-checkout-wrapper">
              <div class="side-cart-checkout-item subtotal">
                <p>Subtotal</p>
                <p><span>$</span>100</p>
              </div>
              <div class="side-cart-checkout-item discount">
                <p>Discount</p>
                <p><span>$</span>100</p>
              </div>
              <div class="side-cart-checkout-item total">
                <p>Total</p>
                <p><span>$</span>100</p>
              </div>
            </div>
            <div class="side-cart-checkout-cta">
              <button>Add to Cart</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
const productId = {{ product.id }};
const base = '{{ shop.url }}';
const baseUrl = `${base}/apps/proxyTest`;
const shop_money_format = '{{ shop.money_format }}';

// Add this right after the shop_money_format constant declaration
if (!window.config) {
  window.config = {};
}
window.config.products = [];

window.config.collectionProducts = {
  {%- for collection in collections -%}
    "{{ collection.id }}": [
      {%- for product in collection.products -%}
        {
          "id": {{ product.id | json }},
          "title": {{ product.title | json }},
          "price": {{ product.price }},
          "featured_image": {{ product.featured_image | img_url: 'medium' | json }},
          "url": {{ product.url | json }},
          "has_only_default_variant": {{ product.has_only_default_variant | json }},
          "options": {{ product.options_with_values | json }},
          "variants": [
            {%- for variant in product.variants -%}
              {
                "id": {{ variant.id | json }},
                "title": {{ variant.title | json }},
                "price": {{ variant.price }},
                "available": {{ variant.available | json }},
                "featured_image": {{ variant.featured_image | default: product.featured_image | img_url: 'medium' | json }},
                "options": {{ variant.options | json }}
              }
              {%- unless forloop.last -%},{%- endunless -%}
            {%- endfor -%}
          ]
        }
        {%- unless forloop.last -%},{%- endunless -%}
      {%- endfor -%}
    ]
    {%- unless forloop.last -%},{%- endunless -%}
  {%- endfor -%}
};

// Initialize products from collections
window.config.products = Object.values(window.config.collectionProducts)
  .flat()
  .map(product => ({
    ...product,
    id: String(product.id),
    variants: product.variants || []
  }));

// Add this after window.config initialization
window.sideCart = {
  items: [],
  subtotal: 0,
  discount: 0,
  total: 0
};

function  fetchProductsFromDatabase(){
  // fetch(baseUrl, {
  //      method: 'GET',
  //      redirect: 'manual',
  //      headers: {
  //        'Content-Type': 'application/json',
  //         'origin': window.location.origin,
  //      }
  //    })
  //    .then(res => res.json())
  //    .then(data => {
  //       const resdata = {
  //         "message": {
  //             "bundle": 
  //                 {
  //                 "id": "cm4mco50w004j3gapayuiqcxk",
  //                 "productId": "gid://shopify/Product/9582675591475",
  //                 "bundleName": "test product byob bundle",
  //                 "bundleDescription": "test",
  //                 "products": "[]",
  //                 "isDiscountOptional": false,
  //                 "discountType": "tiered",
  //                 "discountValue": "",
  //                 "noDiscount": false,
  //                 "media": "[]",
  //                 "conditions": "[{\"id\":1,\"productCondition\":\"any\",\"productConditionNumber\":\"4\",\"productSelectionType\":\"product\",\"selectedProducts\":[{\"id\":\"gid://shopify/Product/9582674936115\",\"title\":\"About Time Dress\",\"handle\":\"about-time-dress\",\"image\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/ABOUTTIMEDRESS_MANGOMOJITOSTRIPE_3262.webp?v=1734070024\"},{\"id\":\"gid://shopify/Product/9582674444595\",\"title\":\"Ally Jogger in French Terry\",\"handle\":\"ally-pant\",\"image\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/ALLYPANT_CAMEOROSE_3040.webp?v=1734069801\"},{\"id\":\"gid://shopify/Product/9582674805043\",\"title\":\"Cameron Dress\",\"handle\":\"cameron-dress\",\"image\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/CAMERONDRESS_HEATHERGREY_2975.webp?v=1734069957\"},{\"id\":\"gid://shopify/Product/9582675231027\",\"title\":\"Carter Top\",\"handle\":\"carter-top\",\"image\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/CARTERTOP_MANGOMOJITO_4409.webp?v=1734070148\"},{\"id\":\"gid://shopify/Product/9582675001651\",\"title\":\"Steph Sweatshirt in Stripe Terry Cloth\",\"handle\":\"steph-sweatshirt-1\",\"image\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/STEPHSWEATSHIRT_MANGOMOJITOSTRIPE_2582.webp?v=1734070057\"}],\"selectedCollection\":null,\"chooseEachItemOnce\":false}]",
  //                 "tierBasedOn": "percentage",
  //                 "purchaseRequirement": "quantity",
  //                 "tiers": "[{\"id\":1734070207539,\"condition\":\"any\",\"requirement\":\"2\",\"value\":\"45\"},{\"id\":1734070258596,\"condition\":\"any\",\"requirement\":\"4\",\"value\":\"80\"}]",
  //                 "productStatus": "active",
  //                 "createdAt": "2024-12-13T06:11:16.977Z",
  //                 "updatedAt": "2024-12-16T11:42:24.889Z",
  //                 "showStepper": true,
  //                 "userId": "offline_byob-templates.myshopify.com"
  //             }
  //         }  
  //     }
  //    const productIds = extractProductIdsFromBundle(resdata);
  //    console.log(productIds);
  //    fetchProductsDataFromShopify(productIds);
  //    })
  //    .catch(error => {
  //      console.error('Error fetching products:', error);
  // });

  const resdata = {
    "id": "cm4va2ln2010lh7yqp0di77sz",
    "productId": "gid://shopify/Product/9594022134067",
    "bundleName": "test collection",
    "bundleDescription": "grtf",
    "products": [],
    "isDiscountOptional": false,
    "discountType": "tiered",
    "discountValue": "",
    "noDiscount": false,
    "media": [],
    "conditions": "[{\"id\":1734634564846,\"productCondition\":\"any\",\"productConditionNumber\":\"4\",\"productSelectionType\":\"collection\",\"selectedProducts\":[],\"selectedCollection\":{\"id\":\"gid://shopify/Collection/486469304627\",\"title\":\"test\",\"productsCount\":5},\"chooseEachItemOnce\":false},{\"id\":1734637506417,\"productCondition\":\"any\",\"productConditionNumber\":\"1\",\"productSelectionType\":\"collection\",\"selectedProducts\":[],\"selectedCollection\":{\"id\":\"gid://shopify/Collection/486472515891\",\"title\":\"hello\",\"productsCount\":4},\"chooseEachItemOnce\":false},{\"id\":1734637847573,\"productCondition\":\"any\",\"productConditionNumber\":\"1\",\"productSelectionType\":\"product\",\"selectedProducts\":[{\"id\":\"gid://shopify/Product/9582677131571\",\"title\":\"Striped Poncho\",\"handle\":\"striped-poncho\",\"image\":{\"id\":\"gid://shopify/ProductImage/47762204361011\",\"altText\":\"Striped Poncho in Golden Brown Stripe\",\"originalSrc\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/STRIPEDPONCHO_GOLDENBROWNSTRIPE_1.webp?v=1734070507\"}}],\"selectedCollection\":null,\"chooseEachItemOnce\":false}]",
    "tierBasedOn": "price",
    "purchaseRequirement": "amount",
    "tiers": "[{\"id\":1734726211591,\"condition\":\"any\",\"requirement\":\"5\",\"value\":\"10\"},{\"id\":1734726250553,\"condition\":\"any\",\"requirement\":\"6\",\"value\":\"20\"}]",
    "productStatus": "active",
    "createdAt": "2024-12-19T12:08:28.430Z",
    "updatedAt": "2024-12-20T20:32:06.389Z",
    "showStepper": true,
    "userId": "offline_byob-templates.myshopify.com"
}
      return resdata;
}

function formatMoney(cents, format) {
  if (typeof cents === 'string') cents = cents.replace('.', '');
  let value = '';
  let placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
  let formatString = format;

  function defaultOption(opt, def) {
    return (typeof opt == 'undefined' ? def : opt);
  }

  function formatWithDelimiters(number, precision, thousands, decimal) {
    precision = defaultOption(precision, 2);
    thousands = defaultOption(thousands, ',');
    decimal = defaultOption(decimal, '.');

   if (isNaN(number) || number == null) { return 0; }

    number = (number/100.0).toFixed(precision);

    const parts = number.split('.'),
      dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
      cents = parts[1] ? (decimal + parts[1]) : '';
      return dollars + cents;
    }
          
    switch(formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }
          
   return formatString.replace(placeholderRegex, value);
}

function extractProductDetailsFromBundle(bundles) {
  try {
    let allProductItems = [];
    let allCollectionItems = [];
    
    // Handle both array and single object responses
    const bundleArray = Array.isArray(bundles) ? bundles : [bundles];
    
    bundleArray.forEach(bundle => {
      if (bundle.productSelectionType === "product" && 
          bundle.selectedProducts && 
          Array.isArray(bundle.selectedProducts)) {
        allProductItems = [...allProductItems, ...bundle.selectedProducts];
      }
      
      if (bundle.productSelectionType === "collection" && 
          bundle.selectedCollection) {
        allCollectionItems.push(bundle.selectedCollection);
      }
    });

    return {
      // If both types exist, prioritize products
      type: allProductItems.length > 0 ? 'product' : 'collection',
      products: allProductItems,
      collections: allCollectionItems
    };
  } catch (error) {
    console.error('Error extracting details:', error);
    return {
      type: 'product',
      products: [],
      collections: []
    };
  }
}

function attachCollectionLinkListeners() {
  const collectionLinks = document.querySelectorAll('.collection-link');
  collectionLinks.forEach(link => {
    link.addEventListener('click', function() {
      const collectionId = this.dataset.collectionId;
      // Clean the collection ID for use in selector
      const cleanId = collectionId.replace('gid://shopify/Collection/', '');
      const collectionSection = document.querySelector(`#collection-${cleanId}`);
      
      if (collectionSection) {
        collectionSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    });
  });
}

async function handleBundleData(bundleDetails) {
  try {
    const mainWrapper = document.querySelector('.main-wrapper');
    if (!mainWrapper) return;

    // Clear existing content
    mainWrapper.innerHTML = `
      <div class="collection-info-container">
        <div class="collection-info-container-header">
          <h3 data-bundle-header>Choose from available products</h3>
        </div>
        <div class="collection-info-container-content">
          <p data-bundle-description>Browse through our curated selection of products.</p>
        </div>
      </div>
    `;
    updateBundleText(bundleDetails);

    // Add collection links at the top
    if (bundleDetails.collections.length > 0) {
      mainWrapper.innerHTML += `
        <div class="collection-links-container">
          ${bundleDetails.collections.map((collection) => `
            <button class="collection-link" data-collection-id="${collection.id}">
              Collection: ${collection.title} (${collection.productsCount} Products)
            </button>
          `).join('')}
        </div>
      `;
    }

    // Render all collections vertically
    if (bundleDetails.collections.length > 0) {
      bundleDetails.collections.forEach((collection, index) => {
        mainWrapper.innerHTML += `
            <div class="collection-section" id="collection-${collection.id.replace('gid://shopify/Collection/', '')}">
              <h3 class="section-title"> Select from collection ${collection.title}</h3>
              <div class="collection-products-container">
                Loading collection products...
            </div>
          </div>
        `;
      });

      // Render products for each collection
      bundleDetails.collections.forEach((collection) => {
        renderCollectionProductsVertical(collection);
      });
    }

    // Handle individual products if they exist
    if (bundleDetails.products.length > 0) {
      mainWrapper.innerHTML += `
        <div class="individual-products-section">
          <h3 class="section-title">Select from available products</h3>
          <div class="individual-products-container">
            Loading products...
          </div>
        </div>
      `;

      const productData = await fetchProductsDataFromShopify(bundleDetails.products);
      renderProductItems(productData, '.individual-products-container');
    }

    // Attach scroll event listeners
    attachCollectionLinkListeners();
    
  } catch (error) {
    console.error('Error handling bundle data:', error);
  }
}

function updateBundleText(bundleDetails) {
  const headerElement = document.querySelector('[data-bundle-header]');
  const descriptionElement = document.querySelector('[data-bundle-description]');

  if (headerElement && descriptionElement) {
    if (bundleDetails.products.length > 0 && bundleDetails.collections.length > 0) {
      headerElement.textContent = 'Choose from selected products and collections';
      descriptionElement.textContent = 'Browse through our curated selection of products or explore collections.';
    } else if (bundleDetails.collections.length > 0) {
      headerElement.textContent = 'Choose products from collections';
      descriptionElement.textContent = 'Select collections to view all the available products.';
    } else {
      headerElement.textContent = 'Choose from selected products';
      descriptionElement.textContent = 'Browse through our curated selection of products.';
    }
  }
}

async function fetchProductsDataFromShopify(products) {
  if (!Array.isArray(products)) {
    console.error('Expected array of products, received:', products);
    return [];
  }

  try {
    const productData = await Promise.all(
      products.map(async (item) => {
        // Handle both product and collection items
        const handle = item.handle;
        if (!handle) {
          console.error('Handle not found:', item);
          return null;
        }

        try {
          const response = await fetch(`/products/${handle}.js`);
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          const data = await response.json();
          return {
            ...data,
            featured_image: item.image?.originalSrc || item.image || data.featured_image
          };
        } catch (error) {
          console.error(`Error fetching product ${handle}:`, error);
          return {
            title: item.title,
            handle: item.handle,
            featured_image: item.image?.originalSrc || item.image,
            price: 0,
            id: item.id
          };
        }
      })
    );

    return productData.filter(product => product !== null);
  } catch (error) {
    console.error('Error fetching product data:', error);
    return [];
  }
}

function renderProductItems(productData, containerSelector = '.collection-products-container') {
  try {
    // Store products in window.config object
    window.config.products = productData;
    
    const productsContainer = document.querySelector(containerSelector);
    if (!productsContainer) {
      console.error(`Container not found: ${containerSelector}`);
      return;
    }
    
    productsContainer.innerHTML = `
        ${productData.map(product => `
          <div class="product-card" data-product-id="${parseInt(product.id)}">
            <div class="product-card-wrapper">
              <div class="product-card-image">
                <img
                  src="${product.featured_image}"
                  alt="${product.title}"
                  width="100%"
                  height="100%"
                >
              </div>

              <div class="product-card-content">
                <div class="product-card-top">
                  <div class="product-title">
                    <h4>${product.title}</h4>
                  </div>
                </div>

                <div class="product-card-mid">
                  <div class="product-price">
                    <p>${formatMoney(product.price, shop_money_format)}</p>
                  </div>
                  <div class="product-available-variants">
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
              
              <div class="product-card-cta">
                <div class="add-to-bundle">
                  <button>Add to Cart</button>
                </div>
              </div>
            </div>
          </div>
        `).join('')}
    `;

    attachProductEventListeners();
  } catch (error) {
    console.error('Error rendering products:', error);
  }
}

function attachProductEventListeners() {
  // Close button functionality
  const closeButton = document.querySelector('.close-variant-selector button');
  if (closeButton) {
    closeButton.addEventListener('click', closeVariantSelector);
  }

  // Select variant button functionality
  const selectVariantButton = document.querySelector('.product-variant-selector-cta button');
  if (selectVariantButton) {
    selectVariantButton.textContent = 'Add to Cart';
    selectVariantButton.addEventListener('click', handleVariantSelection);
  }

  // Add to bundle buttons
  document.querySelectorAll('.add-to-bundle button').forEach(button => {
    button.addEventListener('click', function() {
      const productCard = this.closest('.product-card');
      if (productCard) {
        addToCart(productCard);
      }
    });
  });

  // Variant selector popup
  document.querySelectorAll('.product-available-variants').forEach(button => {
    button.addEventListener('click', function(e) {
      const productCard = this.closest('.product-card');
      if (!productCard) return;

      // Remove active state from all product cards
      document.querySelectorAll('.product-card').forEach(card => {
        card.removeAttribute('data-active');
      });

      // Set active state on current product card
      productCard.setAttribute('data-active', 'true');

      const productId = parseInt(productCard.dataset.productId);
      
      // First try to find product in main products array
      let product = window.config.products.find(p => parseInt(p.id) === productId);
      
      // If not found, check collection products
      if (!product) {
        for (const collectionId in window.config.collectionProducts) {
          const collectionProduct = window.config.collectionProducts[collectionId].find(
            p => parseInt(p.id) === productId
          );
          if (collectionProduct) {
            product = {
              ...collectionProduct,
              id: String(collectionProduct.id),
              variants: collectionProduct.variants || []
            };
            break;
          }
        }
      }

      if (!product) {
        console.error('Product not found:', productId);
        return;
      }

      if (!product.variants || !product.options) {
        console.error('Product variants or options not found');
        return;
      }

      const variantPopup = document.querySelector('.product-variant-selector');
      if (!variantPopup) return;

      // Update product title
      const productTitle = variantPopup.querySelector('.product-variant-selector-header h3');
      if (productTitle) {
        productTitle.textContent = product.title;
      }

      // Update product image
      const productImage = variantPopup.querySelector('.product-variant-selector-header-image img');
      if (productImage) {
        productImage.src = product.featured_image;
      }

      // Separate color and size options
      const colorOption = product.options.find(option => 
        option.name.toLowerCase().includes('color') || 
        option.name.toLowerCase().includes('colour')
      );
      
      const sizeOption = product.options.find(option => 
        option.name.toLowerCase().includes('size')
      );

      // Update color variants if they exist
      const colorContainer = variantPopup.querySelector('.color-items-container');
      if (colorContainer && colorOption) {
        colorContainer.innerHTML = colorOption.values.map(color => {
          const isAvailable = product.variants.some(variant => {
            const colorValue = variant.options[colorOption.position - 1];
            return colorValue === color && variant.available;
          });
          
          return `
            <div class="pvsc-item ${!isAvailable ? 'disabled' : ''}" data-variant-value="${color}">
              <div class="pvsc-item-image">
                <div class="color-swatch" style="background-color: ${color.toLowerCase()}"></div>
              </div>
              <div class="color-title ${!isAvailable ? 'disabled' : ''}">
                <p>${color}</p>
              </div>
            </div>
          `;
        }).join('');
        
        // Select first available color by default
        const firstAvailableColor = colorContainer.querySelector('.pvsc-item:not(.disabled)');
        if (firstAvailableColor) {
          firstAvailableColor.classList.add('selected');
        }
        
        variantPopup.querySelector('.product-variant-selector-colors').style.display = 'block';
      } else {
        variantPopup.querySelector('.product-variant-selector-colors').style.display = 'none';
      }

      // Update size variants if they exist
      const sizeContainer = variantPopup.querySelector('.size-items-container');
      if (sizeContainer && sizeOption) {
        const selectedColor = colorContainer?.querySelector('.pvsc-item.selected')?.dataset.variantValue;
        
        sizeContainer.innerHTML = sizeOption.values.map(size => {
          const isAvailable = product.variants.some(variant => {
            const sizeValue = variant.options[sizeOption.position - 1];
            const colorValue = selectedColor ? variant.options[colorOption.position - 1] : null;
            return sizeValue === size && variant.available && 
                   (!selectedColor || colorValue === selectedColor);
          });
          
          return `
            <div class="pvsc-item ${!isAvailable ? 'disabled' : ''}" data-variant-value="${size}">
              <div class="size ${!isAvailable ? 'disabled' : ''}">
                <p>${size}</p>
              </div>
            </div>
          `;
        }).join('');
        
        // Select first available size by default
        const firstAvailableSize = sizeContainer.querySelector('.pvsc-item:not(.disabled)');
        if (firstAvailableSize) {
          firstAvailableSize.classList.add('selected');
        }
        
        variantPopup.querySelector('.product-variant-selector-size').style.display = 'block';
      } else {
        variantPopup.querySelector('.product-variant-selector-size').style.display = 'none';
      }

      // Show the popup
      variantPopup.classList.remove('closed');

      // Handle variant selection
      variantPopup.querySelectorAll('.pvsc-item:not(.disabled)').forEach(item => {
        item.addEventListener('click', function() {
          const container = this.closest('.pvsc-items-container');
          container.querySelectorAll('.pvsc-item').forEach(i => 
            i.classList.remove('selected')
          );
          this.classList.add('selected');
          
          // If this is a color selection, update available sizes
          if (container.classList.contains('color-items-container')) {
            updateAvailableSizes(product, this.dataset.variantValue);
          }
        });
      });
    });
  });

  // Helper function to update available sizes based on color selection
  function updateAvailableSizes(product, selectedColor) {
    const sizeContainer = document.querySelector('.size-items-container');
    if (!sizeContainer) return;
    
    const sizeOption = product.options.find(option => 
      option.name.toLowerCase().includes('size')
    );
    
    if (!sizeOption) return;
    
    sizeContainer.querySelectorAll('.pvsc-item').forEach(sizeItem => {
      const size = sizeItem.dataset.variantValue;
      const isAvailable = product.variants.some(variant => 
        variant.option_values.some(opt => opt.value === size && variant.available) &&
        variant.option_values.some(opt => opt.value === selectedColor)
      );
      
      sizeItem.classList.toggle('disabled', !isAvailable);
      
      // Update or add unavailable label
      const existingLabel = sizeItem.querySelector('.unavailable-label');
      if (!isAvailable && !existingLabel) {
        sizeItem.querySelector('.size').insertAdjacentHTML('beforeend', '<span class="unavailable-label">Sold out</span>');
      } else if (isAvailable && existingLabel) {
        existingLabel.remove();
      }
    });
    
    // If current selected size is now unavailable, select first available size
    const currentSelected = sizeContainer.querySelector('.selected');
    if (currentSelected?.classList.contains('disabled')) {
      currentSelected.classList.remove('selected');
      const firstAvailable = sizeContainer.querySelector('.pvsc-item:not(.disabled)');
      if (firstAvailable) {
        firstAvailable.classList.add('selected');
      }
    }
  }
}

function renderCollectionProductsVertical(collection) {
  try {
    const id = collection.id.replace('gid://shopify/Collection/', '');
    const collectionProducts = window.config.collectionProducts[id] || [];
    
    // Add collection products to the main products array if they don't exist
    collectionProducts.forEach(product => {
      const formattedProduct = {
        ...product,
        id: String(product.id),
        variants: product.variants || [],
        options: product.options || [],
        title: product.title || '',
        price: product.price || 0,
        featured_image: product.featured_image || ''
      };
      
      const existingProductIndex = window.config.products.findIndex(p => p.id === formattedProduct.id);
      if (existingProductIndex === -1) {
        window.config.products.push(formattedProduct);
      } else {
        // Update existing product with collection data
        window.config.products[existingProductIndex] = {
          ...window.config.products[existingProductIndex],
          ...formattedProduct
        };
      }
    });

    const cleanId = collection.id.replace('gid://shopify/Collection/', '');
    const productsContainer = document.querySelector(`#collection-${cleanId} .collection-products-container`);
    
    if (!productsContainer) {
      console.error(`Container not found for collection: ${collection.title}`);
      return;
    }
    
    productsContainer.innerHTML = `
        ${collectionProducts.map(product => `
          <div class="product-card" data-collection-id="${id}" data-product-id="${parseInt(product.id)}">
            <div class="product-card-wrapper">
              <div class="product-card-image">
                <img
                  src="${product.featured_image}"
                  alt="${product.title}"
                  width="100%"
                  height="100%"
                >
              </div>

              <div class="product-card-content">
                <div class="product-card-top">
                  <div class="product-title">
                    <h4>${product.title}</h4>
                  </div>
                </div>

                <div class="product-card-mid">
                  <div class="product-price">
                    <p>${formatMoney(product.price, shop_money_format)}</p>
                  </div>
                  <div class="product-available-variants">
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
              
              <div class="product-card-cta">
                <div class="add-to-bundle">
                  <button>Add to Cart</button>
                </div>
              </div>
            </div>
          </div>
        `).join('')}
    `;

    attachProductEventListeners();
  } catch (error) {
    console.error('Error rendering collection products:', error);
  }
}

function closeVariantSelector() {
  const variantPopup = document.querySelector('.product-variant-selector');
  if (variantPopup) {
    variantPopup.classList.add('closed');
  }
}

function handleVariantSelection() {
  const variantPopup = document.querySelector('.product-variant-selector');
  const productCard = document.querySelector('.product-card[data-active="true"]');
  
  if (!variantPopup || !productCard) return;

  let product = null;  
  const productId = productCard.dataset.productId;
  const collectionId = productCard.dataset.collectionId;
  if(collectionId){
       product = window.config.collectionProducts[collectionId].find(p => parseInt(p.id)=== parseInt(productId))
    }else{
      product = window.config.products.find(p => parseInt(p.id) === parseInt(productId));
    }
  
    if (!product) return;

  // Get selected color and size
  const selectedColor = variantPopup.querySelector('.color-items-container .pvsc-item.selected')?.dataset.variantValue;
  const selectedSize = variantPopup.querySelector('.size-items-container .pvsc-item.selected')?.dataset.variantValue;
  
  // Find the matching variant
  const selectedVariant = product.variants.find(variant => {
    const colorOptionIndex = product.options.findIndex(opt => 
      opt.name.toLowerCase().includes('color') || 
      opt.name.toLowerCase().includes('colour')
    );
    
    const sizeOptionIndex = product.options.findIndex(opt => 
      opt.name.toLowerCase().includes('size')
    );

    const variantColor = colorOptionIndex !== -1 ? variant.options[colorOptionIndex] : null;
    const variantSize = sizeOptionIndex !== -1 ? variant.options[sizeOptionIndex] : null;

    const colorMatches = !selectedColor || variantColor === selectedColor;
    const sizeMatches = !selectedSize || variantSize === selectedSize;

    return colorMatches && sizeMatches && variant.available;
  });

  if (selectedVariant) {
    // Add to cart directly
    updateSideCart(product, selectedVariant);
  }

  // Close the variant selector
  closeVariantSelector();
}

function addToCart(productCard) {
  let product = null;
  const productId = productCard.dataset.productId;

  const collectionId = productCard.dataset.collectionId;
  if(collectionId){
       product = window.config.collectionProducts[collectionId].find(p => parseInt(p.id)=== parseInt(productId))
    }else{
      product = window.config.products.find(p => parseInt(p.id) === parseInt(productId));
    }

   
  
  if (!product || !product.variants || !product.variants.length) {
    console.error('Product or variants not found');
    return;
  }

  // If product has only one variant, add it directly
  if (product.variants.length === 1) {
    updateSideCart(product, product.variants[0]);
    return;
  }

  // For products with multiple variants, always open variant selector
  const variantDisplay = productCard.querySelector('.product-available-variants');
  if (!variantDisplay) {
    console.error('Variant display not found');
    return;
  }

  // Trigger variant selector popup
  variantDisplay.click();
}

function updateSideCart(product, variant, quantity = 1) {
  if (!window.sideCart) {
    window.sideCart = {
      items: [],
      subtotal: 0,
      discount: 0,
      total: 0
    };
  }

  const existingItemIndex = window.sideCart.items.findIndex(item => String(item.id) === String(variant.id));
  
  if (existingItemIndex !== -1) {
    // Update existing item
    const existingItem = window.sideCart.items[existingItemIndex];
    existingItem.quantity += quantity;
    window.sideCart.subtotal += variant.price * quantity;
  } else {
    // Create new cart item
    const cartItem = {
      id: variant.id,
      productId: product.id,
      title: product.title,
      image: product.featured_image,
      variant: {
        color: product.options.findIndex(opt => opt.name.toLowerCase().includes('color') || opt.name.toLowerCase().includes('colour')) !== -1 
          ? variant.options[product.options.findIndex(opt => opt.name.toLowerCase().includes('color') || opt.name.toLowerCase().includes('colour'))] 
          : null,
        size: product.options.findIndex(opt => opt.name.toLowerCase().includes('size')) !== -1 
          ? variant.options[product.options.findIndex(opt => opt.name.toLowerCase().includes('size'))] 
          : null
      },
      price: variant.price,
      quantity: quantity
    };

    window.sideCart.items.unshift(cartItem);
    window.sideCart.subtotal += variant.price * quantity;
  }

  window.sideCart.discount = calculateDiscount(window.sideCart.items);
  window.sideCart.total = window.sideCart.subtotal - window.sideCart.discount;

  renderSideCart();
  updateCartTotals();
  // Add this new section to update discount headers for tiered discounts
  if (window.discountConditions?.discountType === 'tiered') {
    const discountStepperContainer = document.querySelectorAll('.discount-stepper');
    const discountInfoHeaders = document.querySelectorAll('.discount-info-container-header h3');
    updateTieredSteppers(window.discountConditions.tiers, discountStepperContainer, discountInfoHeaders);
  } else {
    // For normal discounts
    updateDiscountSteppers(window.discountConditions?.conditions || []);
  }
}

function calculateDiscount(cartItems) {
  if (!window.discountConditions || !cartItems.length) return 0;

  if (window.discountConditions.discountType === 'tiered') {
    return calculateTieredDiscount(cartItems);
  }

  const { discountType, discountValue, conditions } = window.discountConditions;
  const conditionsStatus = [];
  
  // Check each condition
  for (const condition of conditions) {
    const { productConditionNumber, productSelectionType, selectedCollection, selectedProducts } = condition;
    let matchingItemsCount = 0;

    // Count matching items based on condition type
    cartItems.forEach(cartItem => {
      let isMatch = false;
      const cleanCartProductId = String(cartItem.productId).replace('gid://shopify/Product/', '');

      if (productSelectionType === 'collection' && selectedCollection) {
        // Check if item is from the specified collection
        const collectionProducts = window.config.collectionProducts[selectedCollection.id.replace('gid://shopify/Collection/', '')] || [];
        isMatch = collectionProducts.some(p => {
          const cleanCollectionProductId = String(p.id).replace('gid://shopify/Product/', '');
          return cleanCollectionProductId === cleanCartProductId;
        });
      }

      if (productSelectionType === 'product' && selectedProducts) {
        // Check if item matches any of the selected products
        isMatch = selectedProducts.some(p => {
          const cleanSelectedProductId = String(p.id).replace('gid://shopify/Product/', '');
          return cleanSelectedProductId === cleanCartProductId;
        });
      }

      if (isMatch) {
        matchingItemsCount += cartItem.quantity;
      }
    });

    conditionsStatus.push({
      condition,
      met: matchingItemsCount >= productConditionNumber,
      required: productConditionNumber,
      current: matchingItemsCount
    });
  }

  // Log conditions status for debugging
  // console.log('Cart Items:', cartItems);
  // console.log('Discount Conditions Status:', conditionsStatus);

  // Check if all conditions are met
  const allConditionsMet = conditionsStatus.every(status => status.met);
  
  if (!allConditionsMet) {
    const remainingConditions = conditionsStatus
      .filter(status => !status.met)
      .map(status => {
        const condition = status.condition;
        const remaining = status.required - status.current;
        return `Need ${remaining} more ${remaining === 1 ? 'item' : 'items'} from ${
          condition.productSelectionType === 'collection' 
            ? `collection "${condition.selectedCollection.title}"`
            : 'selected products'
        }`;
      });
    // console.log('Remaining conditions to meet:', remainingConditions);
    return 0;
  }

  // Calculate discount based on type
  const subtotal = window.sideCart.subtotal;
  let discountAmount = 0;

  switch (discountType) {
  case 'percentage':
    discountAmount = (subtotal * parseFloat(discountValue)) / 100;
    break;
  case 'fixed-amount':
    discountAmount = parseFloat(discountValue) * 100; // Convert to cents
    break;
  case 'price':
    // For price type, we want the final total to be the discountValue
    const targetPrice = parseFloat(discountValue) * 100; // Convert to cents
    discountAmount = subtotal - targetPrice;
    // Ensure we don't give a negative discount
    if (discountAmount < 0) discountAmount = 0;
    break;
  default:
    discountAmount = 0;
    }

  return Math.round(discountAmount); // Return rounded amount in cents
}

function calculateTieredDiscount(cartItems) {
  if (!window.discountConditions?.tiers || !Array.isArray(window.discountConditions.tiers)) {
    console.log('No valid tiers found');
    return 0;
  }

  const { tierBasedOn, tiers } = window.discountConditions;
  let baseValue = 0;

  try {
    baseValue = calculateTierBaseValue(cartItems);
    const subtotalInCents = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);

    console.log('Base Value Calculation:', {
      tierBasedOn,
      baseValue,
      subtotalInCents,
      totalItems
    });

    const applicableTier = findApplicableTier(baseValue);
    if (!applicableTier) return 0;

    console.log('Applicable Tier:', applicableTier);

    let discountAmount = 0;
    switch (tierBasedOn) {
      case 'percentage':
        // Calculate percentage of the subtotal
        discountAmount = Math.floor((subtotalInCents * parseFloat(applicableTier.value)) / 100);
        break;
      case 'fixed-amount':
        // Fixed amount off the total
        discountAmount = parseFloat(applicableTier.value) * 100;
        break;
      case 'price':
        // Set total price to this amount
        const targetPrice = parseFloat(applicableTier.value) * 100;
        discountAmount = Math.max(0, subtotalInCents - targetPrice);
        break;
      case 'per-item':
        // Discount per item
        const perItemDiscount = parseFloat(applicableTier.value) * 100;
        discountAmount = perItemDiscount * totalItems;
        break;
      default:
        discountAmount = 0;
    }

    console.log('Discount Calculation Result:', {
      type: tierBasedOn,
      value: applicableTier.value,
      baseValue,
      subtotalInCents,
      discountAmount
    });

    return Math.round(discountAmount);
  } catch (error) {
    console.error('Error calculating discount:', error);
    return 0;
  }
}

function renderSideCart() {
  const sideCartContainer = document.querySelector('.side-cart-products');
  if (!sideCartContainer) return;

  // Update cart count
  const addedProductsCount = document.querySelector('.added-products-count');
  if (addedProductsCount) {
    addedProductsCount.textContent = window.sideCart.items.length;
  }

  // Render cart items
  sideCartContainer.innerHTML = window.sideCart.items.map(item => `
    <div class="sc-product-item" data-variant-id="${item.id}">
      <div class="scpt-image">
        <img
          src="${item.image}"
          alt="${item.title}"
          width="100%"
          height="100%"
        >
      </div>
      <div class="scpt-content">
        <div class="scpt-title">
          <h4>${item.title}</h4>
        </div>
        ${item.variant.color || item.variant.size ? `
          <div class="scpt-variant">
            <p>${[item.variant.color, item.variant.size].filter(Boolean).join('/')}</p>
          </div>
        ` : ''}
        <div class="scpt-price-wrapper">
          <div class="quantity-controls">
            <button class="quantity-btn minus" aria-label="Decrease quantity">-</button>
            <input 
              type="number" 
              class="quantity-input" 
              value="${item.quantity}"
              min="1"
              max="${item.inventory_quantity}"
              data-inventory="${item.inventory_quantity}"
              aria-label="Item quantity"
            >
            <button class="quantity-btn plus" aria-label="Increase quantity">+</button>
          </div>
          <div class="scpt-price new-price">
            <p><span>$</span>${(item.price / 100).toFixed(2)}</p>
          </div>
        </div>
      </div>

      <div class="scpt-remove-item">
        <button onclick="removeFromSideCart('${item.id}')">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="24" height="24" rx="12" fill="#0F0F0F"/>
            <path d="M14.8281 9.17188L9.17127 14.8287" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M9.17188 9.17188L14.8287 14.8287" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
      </div>
    </div>
  `).join('');

  // Update totals
  updateCartTotals();
  
  // Attach quantity event listeners
  attachQuantityListeners();
}

function removeFromSideCart(variantId) {
  if (!window.sideCart || !window.sideCart.items) return;

  const itemIndex = window.sideCart.items.findIndex(item => String(item.id) === String(variantId));

  if (itemIndex > -1) {
    const item = window.sideCart.items[itemIndex];
    window.sideCart.subtotal -= item.price * item.quantity;
    window.sideCart.items.splice(itemIndex, 1);
    window.sideCart.discount = calculateDiscount(window.sideCart.items);
    window.sideCart.total = window.sideCart.subtotal - window.sideCart.discount;
    renderSideCart();
    // Add this line to update discount steppers
    updateDiscountSteppers(window.discountConditions.conditions);
  } else {
    console.error('Item not found in cart with variantId:', variantId);
  }
}

function updateCartTotals() {
  const subtotalElement = document.querySelector('.side-cart-checkout-item.subtotal p:last-child');
  const discountElement = document.querySelector('.side-cart-checkout-item.discount p:last-child');
  const totalElement = document.querySelector('.side-cart-checkout-item.total p:last-child');

  // console.log('Cart Totals Debug:', {
  //   subtotal: window.sideCart?.subtotal,
  //   discount: window.sideCart?.discount,
  //   total: window.sideCart?.total,
  //   discountConditions: window.discountConditions
  // });

  if (subtotalElement) {
    subtotalElement.innerHTML = `<span>$</span>${((window.sideCart?.subtotal || 0) / 100).toFixed(2)}`;
  }

  if (discountElement) {
    const discountAmount = window.sideCart?.discount || 0;
    let discountText = '';

    if (window.discountConditions?.discountType === 'tiered') {
      const cartItems = window.sideCart?.items || [];
      const baseValue = calculateTierBaseValue(cartItems);
      const applicableTier = findApplicableTier(baseValue);

      // console.log('Tiered Discount Debug:', {
      //   baseValue,
      //   applicableTier,
      //   discountAmount
      // });

      if (applicableTier) {
        discountText = ` (-${getDiscountText(applicableTier.type, applicableTier.value)})`;
      }
    } else {
      const discountType = window.discountConditions?.discountType === 'percentage' ? '%' : '$';
      const discountValue = window.discountConditions?.discountValue || 0;
      discountText = ` (-${discountValue}${discountType})`;
    }

    discountElement.innerHTML = `<span>$</span>${(discountAmount / 100).toFixed(2)}${discountText}`;
  }

  if (totalElement) {
    totalElement.innerHTML = `<span>$</span>${((window.sideCart?.total || 0) / 100).toFixed(2)}`;
  }
}

function findApplicableTier(baseValue) {
  if (!window.discountConditions?.tiers || !Array.isArray(window.discountConditions.tiers)) {
    return null;
  }

  // console.log('Finding applicable tier:', {
  //   baseValue,
  //   availableTiers: window.discountConditions.tiers
  // });

  const sortedTiers = [...window.discountConditions.tiers]
    .filter(tier => tier && typeof tier.threshold === 'number')
    .sort((a, b) => b.threshold - a.threshold); // Sort in descending order

  // For total_price, thresholds are in dollars, for items they're counts
  const applicableTier = sortedTiers.find(tier => {
    const threshold = parseFloat(tier.threshold);
    return baseValue >= threshold;
  });
  
  // console.log('Selected tier:', applicableTier);
  
  return applicableTier || null;
}

function attachQuantityListeners() {
  document.querySelectorAll('.sc-product-item').forEach(item => {
    const minusBtn = item.querySelector('.quantity-btn.minus');
    const plusBtn = item.querySelector('.quantity-btn.plus');
    const input = item.querySelector('.quantity-input');
    const variantId = item.dataset.variantId;

    if (minusBtn && plusBtn && input) {
      // Prevent manual input changes
      input.addEventListener('keydown', (e) => {
        e.preventDefault();
        return false;
      });

      // Prevent direct input changes
      input.addEventListener('input', (e) => {
        e.preventDefault();
        const cartItem = window.sideCart.items.find(item => String(item.id) === String(variantId));
        if (cartItem) {
          e.target.value = cartItem.quantity;
        }
        return false;
      });

      minusBtn.addEventListener('click', (e) => {
        e.preventDefault();
        const currentQty = parseInt(input.value);
        updateItemQuantity(variantId, Math.max(1, currentQty - 1));
      });

      plusBtn.addEventListener('click', (e) => {
        e.preventDefault();
        const currentQty = parseInt(input.value);
        updateItemQuantity(variantId, currentQty + 1);
      });
    }
  });
}

function updateItemQuantity(variantId, newQuantity) {
  console.log('UpdateItemQuantity called:', { variantId, newQuantity });
  
  if (newQuantity < 1) return;

  const itemIndex = window.sideCart.items.findIndex(item => String(item.id) === String(variantId));
  if (itemIndex === -1) {
    console.error('Item not found in cart:', variantId);
    return;
  }

  const item = window.sideCart.items[itemIndex];
  console.log('Found item:', item);
  
  const oldQuantity = item.quantity;
  item.quantity = newQuantity;
  
  window.sideCart.subtotal += item.price * (newQuantity - oldQuantity);
  window.sideCart.discount = calculateDiscount(window.sideCart.items);
  window.sideCart.total = window.sideCart.subtotal - window.sideCart.discount;

  // Instead of calling updateSideCart, call renderSideCart directly
  renderSideCart();
  
  // Update the discount steppers
  if (window.discountConditions?.discountType === 'tiered') {
    const discountStepperContainer = document.querySelectorAll('.discount-stepper');
    const discountInfoHeaders = document.querySelectorAll('.discount-info-container-header h3');
    updateTieredSteppers(window.discountConditions.tiers, discountStepperContainer, discountInfoHeaders);
  } else {
    updateDiscountSteppers(window.discountConditions?.conditions || []);
  }
}

function populateDiscountCondition(bundleData) {
  if (!bundleData) return;

  if (bundleData.tierBasedOn && bundleData.tiers) {
    try {
      // Handle tiered discount
      const tiers = JSON.parse(bundleData.tiers || '[]');
      if (!Array.isArray(tiers) || tiers.length === 0) {
        console.error('Invalid tiers data');
        return;
      }

      const discountCondition = {
        discountType: 'tiered',
        tierBasedOn: bundleData.tierBasedOn,
        purchaseRequirement: bundleData.purchaseRequirement,
        tiers: tiers.map(tier => ({
          ...tier,
          threshold: parseFloat(tier.requirement) || 0,
          value: parseFloat(tier.value) || 0,
          type: tier.type || 'percentage'
        }))
      };
      window.discountConditions = discountCondition;
      updateDiscountSteppers(discountCondition.tiers);
    } catch (error) {
      console.error('Error parsing tiers:', error);
    }
  } else {
    // Your existing normal discount logic
    const conditions = JSON.parse(bundleData.conditions || '[]');
    const discountType = bundleData.discountType || 'fixed-amount';
    const discountValue = bundleData.discountValue || '0';

    const discountCondition = {
      discountType: discountType,
      discountValue: discountValue,
      conditions: conditions
    };
    window.discountConditions = discountCondition;
    updateDiscountSteppers(conditions);
  }
}

function getDiscountText(discountType, value) {
  const tierBasedOn = window.discountConditions?.tierBasedOn;
  
  if (window.discountConditions?.discountType === 'tiered') {
    switch (tierBasedOn) {
      case 'percentage':
        return `${value}% OFF`;
      case 'fixed-amount':
        return `$${value} OFF`;
      case 'price':
        return `Fixed price $${value}`;
      case 'per-item':
        return `$${value} OFF per item`;
      default:
        return `$${value} OFF`;
    }
  }

  // For non-tiered discounts
  switch(discountType) {
    case 'percentage':
      return `${value}% OFF`;
    case 'fixed-amount':
      return `$${value} OFF`;
    default:
      return `$${value} OFF`;
  }
}

function calculateTierBaseValue(cartItems) {
  const { tierBasedOn, purchaseRequirement } = window.discountConditions;
  
  // For amount-based requirements, always use total price
  if (purchaseRequirement === 'amount') {
    const totalInCents = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    return totalInCents / 100; // Convert to dollars for threshold comparison
  }

  // For quantity-based requirements
  if (tierBasedOn === 'total_price') {
    const totalInCents = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    return totalInCents / 100;
  }
  // For item count
  return cartItems.reduce((sum, item) => sum + item.quantity, 0);
}

function findNextTier(tiers, currentValue) {
  return tiers
    .sort((a, b) => a.threshold - b.threshold)
    .find(tier => tier.threshold > currentValue);
}

function formatTierRemaining(tier, currentValue) {
  const remaining = tier.threshold - currentValue;
  const { purchaseRequirement } = window.discountConditions;

  // Always show money format for amount-based requirements
  if (purchaseRequirement === 'amount') {
    return formatMoney(remaining * 100, shop_money_format);
  }

  // For quantity-based requirements
  return window.discountConditions.tierBasedOn === 'total_price'
    ? formatMoney(remaining * 100, shop_money_format)
    : `${remaining} ${remaining === 1 ? 'item' : 'items'}`;
}



function updateTieredSteppers(tiers, stepperContainers, infoHeaders) {
  if (!Array.isArray(tiers) || !stepperContainers) return;
  
  const cartItems = window.sideCart?.items || [];
  const baseValue = calculateTierBaseValue(cartItems);
  
  // Sort tiers by threshold in descending order
  const sortedTiers = [...tiers].sort((a, b) => b.threshold - a.threshold);
  const maxTier = sortedTiers[0]; // Highest threshold tier
  const currentTier = findApplicableTier(baseValue);
  const nextTier = sortedTiers.find(tier => tier.threshold > baseValue);
  
  // Check if we've reached the maximum tier
  const isMaxTierReached = currentTier && currentTier.threshold === maxTier.threshold;
  
  // Disable/enable add to cart buttons based on max tier
  const addToCartButtons = document.querySelectorAll('.add-to-bundle button');
  addToCartButtons.forEach(button => {
    if (isMaxTierReached) {
      button.disabled = true;
      button.classList.add('disabled');
    } else {
      button.disabled = false;
      button.classList.remove('disabled');
    }
  });

  // Rest of the existing updateTieredSteppers function
  stepperContainers.forEach(container => {
    if (!container) return;
    container.innerHTML = '';
    
    tiers.forEach(tier => {
      if (!tier) return;
      
      const stepItem = document.createElement('div');
      stepItem.classList.add('discount-stepper-item');
      
      const thresholdText = window.discountConditions.purchaseRequirement === 'amount'
        ? formatMoney(tier.threshold * 100,shop_money_format)
        : window.discountConditions.tierBasedOn === 'total_price'
          ? formatMoney(tier.threshold * 100,shop_money_format)
          : `${tier.threshold} items`;

      stepItem.innerHTML = `
        <div class="discount-condition">
          <p>Spend ${thresholdText}</p>
        </div>
        <div class="discount-value">
          <p>${getDiscountText(tier.type || window.discountConditions.tierBasedOn, tier.value)}</p>
        </div>
      `;
      container.appendChild(stepItem);
    });
  });

  // Update header content
  const headerContent = nextTier
    ? `Add ${formatTierRemaining(nextTier, baseValue)} more to get ${getDiscountText(nextTier.type || 'percentage', nextTier.value || 0)}!`
    : 'Maximum discount tier reached!';

  infoHeaders.forEach(header => {
    if (header) header.innerHTML = headerContent;
  });
}

function updateDiscountSteppers(conditions) {
     const discountHeader = document.querySelector('.template-top-data-discount-info');
     const discountStepperContainer = document.querySelectorAll('.discount-stepper');
     const discountInfoHeaders = document.querySelectorAll('.discount-info-container-header h3');
     const addToCartButtons = document.querySelectorAll('.add-to-bundle button');

     if (!window.discountConditions) return;

     if (window.discountConditions.discountType === 'tiered') {
    updateTieredSteppers(conditions, discountStepperContainer, discountInfoHeaders);
    return;
    }

    //  const discountType = window.discountConditions.discountType === 'percentage' ? '%' : shop_money_format
     
    //  const discountText = `Complete the following to get ${window.discountConditions.discountValue} ${discountType} off on your cart total`;
    const discountText = getDiscountText(window.discountConditions.discountType,window.discountConditions.discountValue)
     discountHeader.innerHTML = discountText;

     // Check if all conditions are met
     const cartItems = window.sideCart?.items || [];
     const allConditionsMet = conditions.every(condition => {
         let matchingItemsCount = 0;

         cartItems.forEach(cartItem => {
             const cleanCartProductId = String(cartItem.productId).replace('gid://shopify/Product/', '');
             let isMatch = false;

             if (condition.productSelectionType === 'collection' && condition.selectedCollection) {
                 const collectionProducts = window.config.collectionProducts[condition.selectedCollection.id.replace('gid://shopify/Collection/', '')] || [];
                 isMatch = collectionProducts.some(p => {
                     const cleanCollectionProductId = String(p.id).replace('gid://shopify/Product/', '');
                     return cleanCollectionProductId === cleanCartProductId;
                 });
             } else if (condition.productSelectionType === 'product' && condition.selectedProducts) {
                 isMatch = condition.selectedProducts.some(p => {
                     const cleanSelectedProductId = String(p.id).replace('gid://shopify/Product/', '');
                     return cleanSelectedProductId === cleanCartProductId;
                 });
             }

             if (isMatch) {
                 matchingItemsCount += cartItem.quantity;
             }
         });

         return matchingItemsCount >= condition.productConditionNumber;
     });

     // Disable/Enable add to cart buttons based on conditions
     addToCartButtons.forEach(button => {
         if (allConditionsMet) {
             button.disabled = true;
             button.textContent = 'Maximum Items Added';
         } else {
             button.disabled = false;
             button.textContent = 'Add to Cart';
         }
     });

     // Update all discount info headers
     if (discountInfoHeaders.length > 0) {
         const remainingConditions = conditions.filter(condition => {
             const cartItems = window.sideCart?.items || [];
             let matchingItemsCount = 0;

             cartItems.forEach(cartItem => {
                 const cleanCartProductId = String(cartItem.productId).replace('gid://shopify/Product/', '');
                 let isMatch = false;

                 if (condition.productSelectionType === 'collection' && condition.selectedCollection) {
                     const collectionProducts = window.config.collectionProducts[condition.selectedCollection.id.replace('gid://shopify/Collection/', '')] || [];
                     isMatch = collectionProducts.some(p => {
                         const cleanCollectionProductId = String(p.id).replace('gid://shopify/Product/', '');
                         return cleanCollectionProductId === cleanCartProductId;
                     });
                 } else if (condition.productSelectionType === 'product' && condition.selectedProducts) {
                     isMatch = condition.selectedProducts.some(p => {
                         const cleanSelectedProductId = String(p.id).replace('gid://shopify/Product/', '');
                         return cleanSelectedProductId === cleanCartProductId;
                     });
                 }

                 if (isMatch) {
                     matchingItemsCount += cartItem.quantity;
                 }
             });

             return matchingItemsCount < condition.productConditionNumber;
         });

         let headerContent;
         
         if (remainingConditions.length > 0) {
             const firstCondition = remainingConditions[0];
             const cartItems = window.sideCart?.items || [];
             let matchingItemsCount = 0;

             cartItems.forEach(cartItem => {
                 const cleanCartProductId = String(cartItem.productId).replace('gid://shopify/Product/', '');
                 let isMatch = false;

                 if (firstCondition.productSelectionType === 'collection' && firstCondition.selectedCollection) {
                     const collectionProducts = window.config.collectionProducts[firstCondition.selectedCollection.id.replace('gid://shopify/Collection/', '')] || [];
                     isMatch = collectionProducts.some(p => {
                         const cleanCollectionProductId = String(p.id).replace('gid://shopify/Product/', '');
                         return cleanCollectionProductId === cleanCartProductId;
                     });
                 } else if (firstCondition.productSelectionType === 'product' && firstCondition.selectedProducts) {
                     isMatch = firstCondition.selectedProducts.some(p => {
                         const cleanSelectedProductId = String(p.id).replace('gid://shopify/Product/', '');
                         return cleanSelectedProductId === cleanCartProductId;
                     });
                 }

                 if (isMatch) {
                     matchingItemsCount += cartItem.quantity;
                 }
             });

             const remainingItems = firstCondition.productConditionNumber - matchingItemsCount;
             
             headerContent = `
                 <svg width="19" height="24" viewBox="0 0 19 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                     <path d="M9.49999 15.4286C9.99029 15.4286 10.4604 15.2357 10.8074 14.8924C11.1545 14.549 11.35 14.0837 11.35 13.5986C11.35 13.1134 11.1545 12.6481 10.8074 12.3048C10.4604 11.9614 9.99029 11.7686 9.49999 11.7686C9.00969 11.7686 8.53956 11.9614 8.19253 12.3048C7.8455 12.6481 7.64999 13.1134 7.64999 13.5986C7.64999 14.0837 7.8455 14.549 8.19253 14.8924C8.53956 15.2357 9.00969 15.4286 9.49999 15.4286ZM17.1 7.37143V19.8286C17.1 20.7989 16.7089 21.7294 16.0149 22.4161C15.3208 23.1028 14.3806 23.4886 13.4 23.4886H5.59999C4.61939 23.4886 3.67918 23.1028 2.98513 22.4161C2.29108 21.7294 1.89999 20.7989 1.89999 19.8286V7.37143C1.89999 6.40111 2.29108 5.47063 2.98513 4.78392C3.67918 4.0972 4.61939 3.71143 5.59999 3.71143H6.52499V2.38114C6.52499 1.89601 6.72051 1.43071 7.06754 1.08736C7.41457 0.744015 7.88469 0.551147 8.37499 0.551147H10.625C11.1153 0.551147 11.5854 0.744015 11.9324 1.08736C12.2795 1.43071 12.475 1.89601 12.475 2.38114V3.71143H13.4C14.3806 3.71143 15.3208 4.0972 16.0149 4.78392C16.7089 5.47063 17.1 6.40111 17.1 7.37143ZM8.37499 3.71143H10.625V2.38114H8.37499V3.71143ZM9.49999 17.7686C8.51939 17.7686 7.57918 17.3828 6.88513 16.6961C6.19108 16.0094 5.79999 15.0789 5.79999 14.1086C5.79999 13.1383 6.19108 12.2078 6.88513 11.5211C7.57918 10.8344 8.51939 10.4486 9.49999 10.4486C10.4806 10.4486 11.4208 10.8344 12.1149 11.5211C12.8089 12.2078 13.2 13.1383 13.2 14.1086C13.2 15.0789 12.8089 16.0094 12.1149 16.6961C11.4208 17.3828 10.4806 17.7686 9.49999 17.7686Z" fill="#0F0F0F"/>
                 </svg>
                 Add ${remainingItems} more ${remainingItems === 1 ? 'item' : 'items'} from ${
                     firstCondition.productSelectionType === 'collection' 
                         ? `collection "${firstCondition.selectedCollection.title}"`
                         : 'selected products'
                 } for discount!
             `;
         } else {
             headerContent = `
                 <svg width="19" height="24" viewBox="0 0 19 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                     <path d="M9.49999 15.4286C9.99029 15.4286 10.4604 15.2357 10.8074 14.8924C11.1545 14.549 11.35 14.0837 11.35 13.5986C11.35 13.1134 11.1545 12.6481 10.8074 12.3048C10.4604 11.9614 9.99029 11.7686 9.49999 11.7686C9.00969 11.7686 8.53956 11.9614 8.19253 12.3048C7.8455 12.6481 7.64999 13.1134 7.64999 13.5986C7.64999 14.0837 7.8455 14.549 8.19253 14.8924C8.53956 15.2357 9.00969 15.4286 9.49999 15.4286ZM17.1 7.37143V19.8286C17.1 20.7989 16.7089 21.7294 16.0149 22.4161C15.3208 23.1028 14.3806 23.4886 13.4 23.4886H5.59999C4.61939 23.4886 3.67918 23.1028 2.98513 22.4161C2.29108 21.7294 1.89999 20.7989 1.89999 19.8286V7.37143C1.89999 6.40111 2.29108 5.47063 2.98513 4.78392C3.67918 4.0972 4.61939 3.71143 5.59999 3.71143H6.52499V2.38114C6.52499 1.89601 6.72051 1.43071 7.06754 1.08736C7.41457 0.744015 7.88469 0.551147 8.37499 0.551147H10.625C11.1153 0.551147 11.5854 0.744015 11.9324 1.08736C12.2795 1.43071 12.475 1.89601 12.475 2.38114V3.71143H13.4C14.3806 3.71143 15.3208 4.0972 16.0149 4.78392C16.7089 5.47063 17.1 6.40111 17.1 7.37143ZM8.37499 3.71143H10.625V2.38114H8.37499V3.71143ZM9.49999 17.7686C8.51939 17.7686 7.57918 17.3828 6.88513 16.6961C6.19108 16.0094 5.79999 15.0789 5.79999 14.1086C5.79999 13.1383 6.19108 12.2078 6.88513 11.5211C7.57918 10.8344 8.51939 10.4486 9.49999 10.4486C10.4806 10.4486 11.4208 10.8344 12.1149 11.5211C12.8089 12.2078 13.2 13.1383 13.2 14.1086C13.2 15.0789 12.8089 16.0094 12.1149 16.6961C11.4208 17.3828 10.4806 17.7686 9.49999 17.7686Z" fill="#0F0F0F"/>
                 </svg>
                 All conditions met! Maximum discount applied!
             `;
         }

         // Update all headers with the same content
         discountInfoHeaders.forEach(header => {
             header.innerHTML = headerContent;
         });
     }


     if (!discountStepperContainer) return;

     discountStepperContainer.forEach(container => {
         container.innerHTML = '';

         conditions.forEach(product => {
             const stepItem = document.createElement('div');
             stepItem.classList.add('discount-stepper-item');
             stepItem.innerHTML = `
                 <div class="discount-condition">
                     <p>${product.productCondition}</p>
                 </div>
                 <p>${product.productConditionNumber} product${product.productConditionNumber > 1 ? 's' : ''}</p>
                 <div class="discount-value">
                     ${product.productSelectionType === 'collection' ? `
                         <p>From ${product.productSelectionType} ${product.selectedCollection.title}</p>
                     ` : `<p>From ${product.productSelectionType} Products</p>`}
                 </div>
             `;
             container.appendChild(stepItem);
         });
     });

    // Check each condition separately and track completed ones
    const completedConditions = conditions.map(condition => {
        const cartItems = window.sideCart?.items || [];
        let matchingItemsCount = 0;

        cartItems.forEach(cartItem => {
            const cleanCartProductId = String(cartItem.productId).replace('gid://shopify/Product/', '');
            let isMatch = false;

            if (condition.productSelectionType === 'collection' && condition.selectedCollection) {
                const collectionProducts = window.config.collectionProducts[condition.selectedCollection.id.replace('gid://shopify/Collection/', '')] || [];
                isMatch = collectionProducts.some(p => {
                    const cleanCollectionProductId = String(p.id).replace('gid://shopify/Product/', '');
                    return cleanCollectionProductId === cleanCartProductId;
                });
            } else if (condition.productSelectionType === 'product' && condition.selectedProducts) {
                isMatch = condition.selectedProducts.some(p => {
                    const cleanSelectedProductId = String(p.id).replace('gid://shopify/Product/', '');
                    return cleanSelectedProductId === cleanCartProductId;
                });
            }

            if (isMatch) {
                matchingItemsCount += cartItem.quantity;
            }
        });

        return {
            condition,
            completed: matchingItemsCount >= condition.productConditionNumber
        };
    });

    // Disable buttons for completed conditions
    completedConditions.forEach(({ condition, completed }) => {
        if (completed) {
            if (condition.productSelectionType === 'collection' && condition.selectedCollection) {
                const collectionId = condition.selectedCollection.id.replace('gid://shopify/Collection/', '');
                const collectionProducts = document.querySelectorAll(`[data-collection-id="${collectionId}"] .add-to-bundle button`);
                collectionProducts.forEach(button => {
                    button.disabled = true;
                    button.textContent = 'Collection Complete';
                });
            } else if (condition.productSelectionType === 'product' && condition.selectedProducts) {
                condition.selectedProducts.forEach(product => {
                    const productId = String(product.id).replace('gid://shopify/Product/', '');
                    const productButton = document.querySelector(`[data-product-id="${productId}"] .add-to-bundle button`);
                    if (productButton) {
                        productButton.disabled = true;
                        productButton.textContent = 'Product Complete';
                    }
                });
            }
        }
    });
}


// In your main initialization code
document.addEventListener('DOMContentLoaded', function() {
  const bundleData = fetchProductsFromDatabase();
  const bundleDetails = extractProductDetailsFromBundle(JSON.parse(bundleData.conditions));
  handleBundleData(bundleDetails);
  populateDiscountCondition(bundleData)
});

function addToSideCart(variant, product, quantity = 1) {
  if (!window.sideCart) {
    window.sideCart = {
      items: [],
      subtotal: 0,
      discount: 0,
      total: 0
    };
  }

  const existingItem = window.sideCart.items.find(item => String(item.id) === String(variant.id));
  
  if (existingItem) {
    // Update existing item
    const newQuantity = existingItem.quantity + quantity;
    existingItem.quantity = newQuantity;
    window.sideCart.subtotal += variant.price * quantity;
  } else {
    // Create new cart item
    const cartItem = {
      id: variant.id,
      productId: product.id,
      title: product.title,
      image: product.featured_image,
      variant: {
        color: product.options.findIndex(opt => opt.name.toLowerCase().includes('color') || opt.name.toLowerCase().includes('colour')) !== -1 
          ? variant.options[product.options.findIndex(opt => opt.name.toLowerCase().includes('color') || opt.name.toLowerCase().includes('colour'))] 
          : null,
        size: product.options.findIndex(opt => opt.name.toLowerCase().includes('size')) !== -1 
          ? variant.options[product.options.findIndex(opt => opt.name.toLowerCase().includes('size'))] 
          : null
      },
      price: variant.price,
      quantity: quantity
    };

    window.sideCart.items.unshift(cartItem);
    window.sideCart.subtotal += variant.price * quantity;
  }

  window.sideCart.discount = calculateDiscount(window.sideCart.items);
  window.sideCart.total = window.sideCart.subtotal - window.sideCart.discount;

  renderSideCart();
  // Add this line to update discount steppers when adding items
  updateDiscountSteppers(window.discountConditions.conditions);
}
</script>
