{% comment %} default section {% endcomment %}

<link rel="stylesheet" href="{{ 'product-byob.css' | asset_url }}">

<div class="bundlesuite-container">
  <div class="banner-image">
    <img
      src="https://s3-alpha-sig.figma.com/img/7d4e/4b0f/2c429d77c6c9667bb682e9199847b206?Expires=1736121600&Key-Pair-Id=APKAQ4GOSFWCVNEHN3O4&Signature=N2gDZd9DoGTju8emFAzs9NipRAaM1jt7yvE4A47rkOO-XmT1t0AtIoqUihNp-Wnf2VfbXxxiWvtRBccSlj~JGBTMVFdLsmvLnEvTQVg-SHXzjvvs~JOmb7hLyXQpGY46Y-KoB2mBRtN4D4rpDCEybJXEApItG87p5hxMA6v5ZRdd5XEPxjoL6icOj4aSH-iSiV6p3QVVs9JkeCNJ~dgbi3sds4WWHkIkanzwDKWlGyVHp2pRJiWU-oSo9x4Xn9RsncxSw6UFquILpl07JAMxXfH2xBvDaut3PhlkS-VSMI5~RjhcYTuyRRUixEC9I4y7jfl1jfWPaPIRxQK1UBKdQw__"
      height="100%"
      width="100%"
      alt=""
    >
  </div>

  <div class="bundlesuite-container-content">
    <div class="template-top-data">
      <div class="template-top-data-header">
        <div class="template-top-data-header-title">
          <h2>Build your BundleSuite</h2>
        </div>
        <div class="template-top-data-header-description">
          <p>
            Build your snack box by selecting any 5 products from 6 products and get discount for more products you add.
          </p>
        </div>
      </div>
      <div class="template-top-data-discount-info">
        <div class="discount-info-item">
          <div class="discount-info-item-title">
            <h3>15% off</h3>
          </div>
          <div class="discount-info-item-description">
            <p>1 Product</p>
          </div>
        </div>
        <div class="discount-info-item">
          <div class="discount-info-item-title">
            <h3>15% off</h3>
          </div>
          <div class="discount-info-item-description">
            <p>1 Product</p>
          </div>
        </div>
      </div>
    </div>

    <div class="template-product-discount-container">
      <div class="product-variant-selector closed">
      <div class="product-variant-selector-container">
        <div class="product-variant-selector-wrapper">
          <div class="close-variant-selector">
            <button>
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect width="24" height="24" rx="12" fill="#0F0F0F"/>
                <path d="M14.8281 9.17188L9.17127 14.8287" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M9.17188 9.17188L14.8287 14.8287" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button>
          </div>

          <div class="product-variant-selector-content">
            <div class="product-variant-selector-header">
              <div class="product-variant-selector-header-title">
                <h3>Art De La Table bainville t-shirt</h3>
              </div>
              <div class="product-variant-selector-header-image">
                <img
                  src="https://cdn.shopify.com/s/files/1/0915/6725/9955/files/image.png?v=1734352604"
                  alt=""
                  width="100%"
                  height="100%"
                >
              </div>
            </div>
          </div>

          <div class="product-variant-selector-colors product-variant-selector-section">
            <div class="pvsc-header color-header">
              <p>Select a colour variation for the selected product</p>
            </div>
            <div class="pvsc-items-container color-items-container">
              <div class="pvsc-item">
                <div class="pvsc-item-image">
                  <img
                    src="https://cdn.shopify.com/s/files/1/0915/6725/9955/files/image.png?v=1734352604"
                    alt=""
                    width="100%"
                    height="100%"
                  >
                </div>
                <div class="pvsc-item-title">
                  <h4>Forest green</h4>
                </div>
              </div>
              <div class="pvsc-item">
                <div class="pvsc-item-image">
                  <img
                    src="https://cdn.shopify.com/s/files/1/0915/6725/9955/files/image.png?v=1734352604"
                    alt=""
                    width="100%"
                    height="100%"
                  >
                </div>
                <div class="pvsc-item-title">
                  <h4>Forest green</h4>
                </div>
              </div>
              <div class="pvsc-item">
                <div class="pvsc-item-image">
                  <img
                    src="https://cdn.shopify.com/s/files/1/0915/6725/9955/files/image.png?v=1734352604"
                    alt=""
                    width="100%"
                    height="100%"
                  >
                </div>
                <div class="pvsc-item-title">
                  <h4>Forest green</h4>
                </div>
              </div>
            </div>
          </div>

          <div class="product-variant-selector-size product-variant-selector-section">
            <div class="pvsc-header size-header">
              <p>Select a size variation for the selected product</p>
            </div>
            <div class="pvsc-items-container size-items-container">
              <div class="pvsc-item">
                <div class="size">
                  <p>S</p>
                </div>
              </div>
              <div class="pvsc-item selected">
                <div class="size">
                  <p>S</p>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="product-variant-selector-cta">
          <button>select variant</button>
        </div>
      </div>
      </div>
      <div class="tpdc-wrapper">
        <div class="main-product-content-container">
          <div class="discount-stepper-container">
            <div class="discount-stepper">
              <div class="discount-stepper-item active">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
              <div class="discount-stepper-item active">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
              <div class="discount-stepper-item">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
              <div class="discount-stepper-item">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
            </div>

            <div class="discount-info-container">
              <div class="discount-info-container-header">
                <h3>
                  <svg width="19" height="24" viewBox="0 0 19 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M1.6 23.32C1.57333 23.3467 1.46667 23.3067 1.28 23.2C1.12 23.12 0.973333 23.0267 0.84 22.92C0.706667 22.8133 0.653333 22.7467 0.68 22.72L17.88 0.96C17.9333 0.879999 18.04 0.893333 18.2 1C18.36 1.08 18.5067 1.18666 18.64 1.32C18.7733 1.45333 18.8133 1.54667 18.76 1.6L1.6 23.32ZM13.08 23.2C11.8267 23.2 10.8667 22.7067 10.2 21.72C9.56 20.7067 9.37333 19.48 9.64 18.04C9.8 17.08 10.1333 16.2133 10.64 15.44C11.1467 14.6667 11.7733 14.0533 12.52 13.6C13.2667 13.1467 14.0533 12.92 14.88 12.92C16.1067 12.92 17.0267 13.4267 17.64 14.44C18.28 15.4533 18.4667 16.6667 18.2 18.08C17.9333 19.52 17.32 20.7333 16.36 21.72C15.4267 22.7067 14.3333 23.2 13.08 23.2ZM13.4 22.6C14.2 22.6 14.76 22.2 15.08 21.4C15.4267 20.6 15.68 19.5867 15.84 18.36C16.08 16.76 16.08 15.56 15.84 14.76C15.6267 13.9333 15.2 13.52 14.56 13.52C13.7867 13.52 13.2 13.9467 12.8 14.8C12.4267 15.6267 12.16 16.6533 12 17.88C11.76 19.2133 11.7333 20.3333 11.92 21.24C12.1067 22.1467 12.6 22.6 13.4 22.6ZM5.28 10.88C4.02667 10.88 3.08 10.3867 2.44 9.4C1.8 8.38667 1.61333 7.14667 1.88 5.68C2.04 4.74667 2.37333 3.89333 2.88 3.12C3.38667 2.34667 4.01333 1.73333 4.76 1.28C5.50667 0.826666 6.29333 0.6 7.12 0.6C8.37333 0.6 9.30667 1.10667 9.92 2.12C10.5333 3.13333 10.7067 4.36 10.44 5.8C10.1733 7.21333 9.56 8.41333 8.6 9.4C7.64 10.3867 6.53333 10.88 5.28 10.88ZM5.6 10.32C6.37333 10.32 6.92 9.92 7.24 9.12C7.58667 8.32 7.85333 7.30667 8.04 6.08C8.30667 4.48 8.32 3.26667 8.08 2.44C7.86667 1.61333 7.44 1.2 6.8 1.2C6 1.2 5.41333 1.62667 5.04 2.48C4.66667 3.33333 4.38667 4.36 4.2 5.56C3.98667 6.89333 3.97333 8.02667 4.16 8.96C4.34667 9.86667 4.82667 10.32 5.6 10.32Z" fill="white"/>
                  </svg>
                  Add 2 more items for maximum discount of 35%!
                </h3>
              </div>
            </div>
          </div>

          <div class="main-wrapper">
            <div class="collection-info-container">
              <div class="collection-info-container-header">
                <h3 data-bundle-header>Choose products from any two collections</h3>
              </div>
              <div class="collection-info-container-content">
                <p data-bundle-description>Select collections to view all the available products in one list.</p>
              </div>
            </div>
          </div>
        </div>

        <div class="side-cart-container">
          <div class="side-cart-header">
            <div class="cart-head">
              <h3>Cart</h3>
            </div>
            <div class="side-cart-toggler"></div>
            <div class="cart-totoal-added-products">
              <p><span class="added-products-count">0</span>products</p>
            </div>
          </div>

          <div class="side-cart-stepper">
            <div class="discount-stepper small">
              <div class="discount-stepper-item active">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
              <div class="discount-stepper-item active">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
              <div class="discount-stepper-item">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
              <div class="discount-stepper-item">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
            </div>

            <div class="discount-info-container small">
              <div class="discount-info-container-header">
                <h3>
                  <svg width="19" height="24" viewBox="0 0 19 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M1.6 23.32C1.57333 23.3467 1.46667 23.3067 1.28 23.2C1.12 23.12 0.973333 23.0267 0.84 22.92C0.706667 22.8133 0.653333 22.7467 0.68 22.72L17.88 0.96C17.9333 0.879999 18.04 0.893333 18.2 1C18.36 1.08 18.5067 1.18666 18.64 1.32C18.7733 1.45333 18.8133 1.54667 18.76 1.6L1.6 23.32ZM13.08 23.2C11.8267 23.2 10.8667 22.7067 10.2 21.72C9.56 20.7067 9.37333 19.48 9.64 18.04C9.8 17.08 10.1333 16.2133 10.64 15.44C11.1467 14.6667 11.7733 14.0533 12.52 13.6C13.2667 13.1467 14.0533 12.92 14.88 12.92C16.1067 12.92 17.0267 13.4267 17.64 14.44C18.28 15.4533 18.4667 16.6667 18.2 18.08C17.9333 19.52 17.32 20.7333 16.36 21.72C15.4267 22.7067 14.3333 23.2 13.08 23.2ZM13.4 22.6C14.2 22.6 14.76 22.2 15.08 21.4C15.4267 20.6 15.68 19.5867 15.84 18.36C16.08 16.76 16.08 15.56 15.84 14.76C15.6267 13.9333 15.2 13.52 14.56 13.52C13.7867 13.52 13.2 13.9467 12.8 14.8C12.4267 15.6267 12.16 16.6533 12 17.88C11.76 19.2133 11.7333 20.3333 11.92 21.24C12.1067 22.1467 12.6 22.6 13.4 22.6ZM5.28 10.88C4.02667 10.88 3.08 10.3867 2.44 9.4C1.8 8.38667 1.61333 7.14667 1.88 5.68C2.04 4.74667 2.37333 3.89333 2.88 3.12C3.38667 2.34667 4.01333 1.73333 4.76 1.28C5.50667 0.826666 6.29333 0.6 7.12 0.6C8.37333 0.6 9.30667 1.10667 9.92 2.12C10.5333 3.13333 10.7067 4.36 10.44 5.8C10.1733 7.21333 9.56 8.41333 8.6 9.4C7.64 10.3867 6.53333 10.88 5.28 10.88ZM5.6 10.32C6.37333 10.32 6.92 9.92 7.24 9.12C7.58667 8.32 7.85333 7.30667 8.04 6.08C8.30667 4.48 8.32 3.26667 8.08 2.44C7.86667 1.61333 7.44 1.2 6.8 1.2C6 1.2 5.41333 1.62667 5.04 2.48C4.66667 3.33333 4.38667 4.36 4.2 5.56C3.98667 6.89333 3.97333 8.02667 4.16 8.96C4.34667 9.86667 4.82667 10.32 5.6 10.32Z" fill="white"/>
                  </svg>
                  Add 2 more items for maximum discount of 35%!
                </h3>
              </div>
            </div>
          </div>

          <div class="side-cart-product-container">
            <div class="side-cart-products">
              <div class="cart-empty">Cart Empty</div>
            </div>
          </div>

          <div class="side-cart-checkout">
            <div class="side-cart-checkout-wrapper">
              <div class="side-cart-checkout-item subtotal">
                <p>Subtotal</p>
                <p>0</p>
              </div>
              <div class="side-cart-checkout-item discount">
                <p>Discount</p>
                <p>0</p>
              </div>
              <div class="side-cart-checkout-item total">
                <p>Total</p>
                <p>0</p>
              </div>
            </div>
            <div class="side-cart-checkout-cta">
              <button>Add to Cart</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
const productId = {{ product.id }};
const base = '{{ shop.url }}';
const baseUrl = `${base}/apps/proxyTest`;
const shop_money_format = '{{ shop.money_format }}';

// Add this right after the shop_money_format constant declaration
if (!window.config) {
  window.config = {};
}
window.config.products = [];

window.config.collectionProducts = {
  {%- for collection in collections -%}
    "{{ collection.id }}": [
      {%- for product in collection.products -%}
        {
          "id": {{ product.id | json }},
          "title": {{ product.title | json }},
          "price": {{ product.price }},
          "featured_image": {{ product.featured_image | img_url: 'medium' | json }},
          "url": {{ product.url | json }},
          "has_only_default_variant": {{ product.has_only_default_variant | json }},
          "options": {{ product.options_with_values | json }},
          "variants": [
            {%- for variant in product.variants -%}
              {
                "id": {{ variant.id | json }},
                "title": {{ variant.title | json }},
                "price": {{ variant.price }},
                "available": {{ variant.available | json }},
                "featured_image": {{ variant.featured_image | default: product.featured_image | img_url: 'medium' | json }},
                "options": {{ variant.options | json }}
              }
              {%- unless forloop.last -%},{%- endunless -%}
            {%- endfor -%}
          ]
        }
        {%- unless forloop.last -%},{%- endunless -%}
      {%- endfor -%}
    ]
    {%- unless forloop.last -%},{%- endunless -%}
  {%- endfor -%}
};

// Add this after window.config initialization
window.sideCart = {
  items: [],
  subtotal: 0,
  discount: 0,
  total: 0
};

function  fetchProductsFromDatabase(){
  // fetch(baseUrl, {
  //      method: 'GET',
  //      redirect: 'manual',
  //      headers: {
  //        'Content-Type': 'application/json',
  //         'origin': window.location.origin,
  //      }
  //    })
  //    .then(res => res.json())
  //    .then(data => {
  //       const resdata = {
  //         "message": {
  //             "bundle": 
  //                 {
  //                 "id": "cm4mco50w004j3gapayuiqcxk",
  //                 "productId": "gid://shopify/Product/9582675591475",
  //                 "bundleName": "test product byob bundle",
  //                 "bundleDescription": "test",
  //                 "products": "[]",
  //                 "isDiscountOptional": false,
  //                 "discountType": "tiered",
  //                 "discountValue": "",
  //                 "noDiscount": false,
  //                 "media": "[]",
  //                 "conditions": "[{\"id\":1,\"productCondition\":\"any\",\"productConditionNumber\":\"4\",\"productSelectionType\":\"product\",\"selectedProducts\":[{\"id\":\"gid://shopify/Product/9582674936115\",\"title\":\"About Time Dress\",\"handle\":\"about-time-dress\",\"image\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/ABOUTTIMEDRESS_MANGOMOJITOSTRIPE_3262.webp?v=1734070024\"},{\"id\":\"gid://shopify/Product/9582674444595\",\"title\":\"Ally Jogger in French Terry\",\"handle\":\"ally-pant\",\"image\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/ALLYPANT_CAMEOROSE_3040.webp?v=1734069801\"},{\"id\":\"gid://shopify/Product/9582674805043\",\"title\":\"Cameron Dress\",\"handle\":\"cameron-dress\",\"image\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/CAMERONDRESS_HEATHERGREY_2975.webp?v=1734069957\"},{\"id\":\"gid://shopify/Product/9582675231027\",\"title\":\"Carter Top\",\"handle\":\"carter-top\",\"image\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/CARTERTOP_MANGOMOJITO_4409.webp?v=1734070148\"},{\"id\":\"gid://shopify/Product/9582675001651\",\"title\":\"Steph Sweatshirt in Stripe Terry Cloth\",\"handle\":\"steph-sweatshirt-1\",\"image\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/STEPHSWEATSHIRT_MANGOMOJITOSTRIPE_2582.webp?v=1734070057\"}],\"selectedCollection\":null,\"chooseEachItemOnce\":false}]",
  //                 "tierBasedOn": "percentage",
  //                 "purchaseRequirement": "quantity",
  //                 "tiers": "[{\"id\":1734070207539,\"condition\":\"any\",\"requirement\":\"2\",\"value\":\"45\"},{\"id\":1734070258596,\"condition\":\"any\",\"requirement\":\"4\",\"value\":\"80\"}]",
  //                 "productStatus": "active",
  //                 "createdAt": "2024-12-13T06:11:16.977Z",
  //                 "updatedAt": "2024-12-16T11:42:24.889Z",
  //                 "showStepper": true,
  //                 "userId": "offline_byob-templates.myshopify.com"
  //             }
  //         }  
  //     }
  //    const productIds = extractProductIdsFromBundle(resdata);
  //    console.log(productIds);
  //    fetchProductsDataFromShopify(productIds);
  //    })
  //    .catch(error => {
  //      console.error('Error fetching products:', error);
  // });

    const resdata = {
      "id": "cm4va2ln2010lh7yqp0di77sz",
      "productId": "gid://shopify/Product/9594022134067",
      "bundleName": "test collection",
      "bundleDescription": "grtf",
      "products": [],
      "isDiscountOptional": false,
      "discountType": "tiered",
      "discountValue": "",
      "noDiscount": false,
      "media": [],
      "conditions": "[{\"id\":1734637506417,\"productCondition\":\"any\",\"productConditionNumber\":\"4\",\"productSelectionType\":\"product\",\"selectedProducts\":[{\"id\":\"gid://shopify/Product/9582675231027\",\"title\":\"Carter Top\",\"handle\":\"carter-top\",\"image\":{\"id\":\"gid://shopify/ProductImage/47762140528947\",\"altText\":\"Carter Top in MANGO MOJITO\",\"originalSrc\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/CARTERTOP_MANGOMOJITO_4409.webp?v=1734070148\"}},{\"id\":\"gid://shopify/Product/9582675460403\",\"title\":\"Compassion Boxy Tank\",\"handle\":\"compassion-boxy-tank\",\"image\":{\"id\":\"gid://shopify/ProductImage/47762158911795\",\"altText\":\"Front view of slightly cropped tank top with compassion and flowers printed with non toxic dyes\",\"originalSrc\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/COMPASSIONBOXYTANK_TRADEWINDS_1.webp?v=1734070249\"}},{\"id\":\"gid://shopify/Product/9582674477363\",\"title\":\"Cropped Wander Pant\",\"handle\":\"cropped-wander-pant\",\"image\":{\"id\":\"gid://shopify/ProductImage/47762085118259\",\"altText\":\"Cropped Wander Pant in HEATHER PURPLE\",\"originalSrc\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/CROPPEDWANDERPANT_HEATHERPURPLE_4146.webp?v=1734069820\"}},{\"id\":\"gid://shopify/Product/9582676476211\",\"title\":\"Daily Sweatshirt\",\"handle\":\"daily-sweatshirt\",\"image\":{\"id\":\"gid://shopify/ProductImage/47762188730675\",\"altText\":\"Daily Sweatshirt in Black\",\"originalSrc\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/DAILYSWEATSHIRT_BLACKIRIS_1.webp?v=1734070421\"}}],\"selectedCollection\":null,\"chooseEachItemOnce\":false},{\"id\":1735199799480,\"productCondition\":\"any\",\"productConditionNumber\":\"4\",\"productSelectionType\":\"collection\",\"selectedProducts\":[],\"selectedCollection\":{\"id\":\"gid://shopify/Collection/486472515891\",\"title\":\"hello\",\"productsCount\":4},\"chooseEachItemOnce\":false}]",
      "tierBasedOn": "percentage",
      "purchaseRequirement": "amount",
      "tiers": "[{\"id\":1734942590709,\"condition\":\"any\",\"requirement\":\"2\",\"value\":\"20\"},{\"id\":1734942596198,\"condition\":\"any\",\"requirement\":\"3\",\"value\":\"30\"},{\"id\":1734942600485,\"condition\":\"any\",\"requirement\":\"4\",\"value\":\"40\"}]",
      "productStatus": "active",
      "createdAt": "2024-12-19T12:08:28.430Z",
      "updatedAt": "2024-12-26T07:56:59.719Z",
      "showStepper": true,
      "userId": "offline_byob-templates.myshopify.com"
  }
      return resdata;
}

function formatMoney(cents, format) {
  if (typeof cents === 'string') cents = cents.replace('.', '');
  let value = '';
  let placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
  let formatString = format;

  function defaultOption(opt, def) {
    return (typeof opt == 'undefined' ? def : opt);
  }

  function formatWithDelimiters(number, precision, thousands, decimal) {
    precision = defaultOption(precision, 2);
    thousands = defaultOption(thousands, ',');
    decimal = defaultOption(decimal, '.');

   if (isNaN(number) || number == null) { return 0; }

    number = (number/100.0).toFixed(precision);

    const parts = number.split('.'),
      dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
      cents = parts[1] ? (decimal + parts[1]) : '';
      return dollars + cents;
    }
          
    switch(formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }
          
   return formatString.replace(placeholderRegex, value);
}


function extractProductDetailsFromBundle(bundles) {
  try {
    let allProductItems = [];
    let allCollectionItems = [];
    
    // Handle both array and single object responses
    const bundleArray = Array.isArray(bundles) ? bundles : [bundles];
    
    bundleArray.forEach(bundle => {
      if (bundle.productSelectionType === "product" && 
          bundle.selectedProducts && 
          Array.isArray(bundle.selectedProducts)) {
        allProductItems = [...allProductItems, ...bundle.selectedProducts];
      }
      
      if (bundle.productSelectionType === "collection" && 
          bundle.selectedCollection) {
        allCollectionItems.push(bundle.selectedCollection);
      }
    });

    return {
      // If both types exist, prioritize products
      type: allProductItems.length > 0 ? 'product' : 'collection',
      products: allProductItems,
      collections: allCollectionItems
    };
  } catch (error) {
    console.error('Error extracting details:', error);
    return {
      type: 'product',
      products: [],
      collections: []
    };
  }
}


async function handleBundleData(bundleDetails, conditions) {
  try {
    const mainWrapper = document.querySelector('.main-wrapper');
    if (!mainWrapper) {
      console.error('Main wrapper not found');
      return;
    }

    // Clear existing content
    mainWrapper.innerHTML = '';

    // Create container for condition links
    const conditionLinksContainer = document.createElement('div');
    conditionLinksContainer.className = 'condition-links-container';
    mainWrapper.appendChild(conditionLinksContainer);

    // Render conditions
    if (conditions && conditions.length > 0) {
      const conditionLinks = conditions.map((condition) => `
        <button class="condition-link" data-condition-id="${condition.id}">
          Select: ${condition.productSelectionType === 'collection' ? 
            condition.selectedCollection.title : 'Products'} 
          (${condition.productConditionNumber} Products)
        </button>
      `).join('');
      conditionLinksContainer.innerHTML = conditionLinks;
    }

    // Create content container for products and collections
    const contentContainer = document.createElement('div');
    contentContainer.className = 'bundle-content-container';
    mainWrapper.appendChild(contentContainer);

    // Render content in the same order as conditions
    for (const condition of conditions) {
      if (condition.productSelectionType === 'product') {
        // Render individual products section
        if (condition.selectedProducts && condition.selectedProducts.length > 0) {
          const productsSection = document.createElement('div');
          productsSection.className = 'individual-products-section';
          
          productsSection.innerHTML = `
            <h3 class="section-title">Select from available products</h3>
            <div class="individual-products-container">
              <div class="loading-indicator">Loading products...</div>
            </div>
          `;
          
          contentContainer.appendChild(productsSection);

          try {
            // Get product IDs from selectedProducts
            const productIds = condition.selectedProducts.map(product => product.id);
            // Fetch product data using the existing function
            const productData = await fetchProductsDataFromShopify(bundleDetails.products);
            const productsContainer = productsSection.querySelector('.individual-products-container');
            if (productsContainer) {
              renderProductItems(productData, '.individual-products-container');
            }
          } catch (error) {
            console.error('Error fetching and rendering products:', error);
            const productsContainer = productsSection.querySelector('.individual-products-container');
            if (productsContainer) {
              productsContainer.innerHTML = '<p class="error-message">Error loading products. Please try again.</p>';
            }
          }
        }
      } else if (condition.productSelectionType === 'collection') {
        // Render collection section
        if (condition.selectedCollection) {
          const collection = condition.selectedCollection;
          const collectionSection = document.createElement('div');
          collectionSection.className = 'collection-section';
          collectionSection.id = `collection-${collection.id.replace('gid://shopify/Collection/', '')}`;
          
          collectionSection.innerHTML = `
            <h3 class="section-title">Select from collection ${collection.title}</h3>
            <div class="collection-products-container" data-collection-id="${collection.id}">
              <div class="loading-indicator">Loading collection products...</div>
            </div>
          `;
          
          contentContainer.appendChild(collectionSection);

          try {
            await renderCollectionProductsVertical(collection);
          } catch (error) {
            console.error('Error rendering collection:', error);
            const productsContainer = collectionSection.querySelector('.collection-products-container');
            if (productsContainer) {
              productsContainer.innerHTML = '<p class="error-message">Error loading collection products. Please try again.</p>';
            }
          }
        }
      }
    }

    // Attach scroll handler after all content is rendered
    attachScrollHandler(conditions);

  } catch (error) {
    console.error('Error handling bundle data:', error);
    if (mainWrapper) {
      mainWrapper.innerHTML = '<p class="error-message">Error loading bundle data. Please refresh the page and try again.</p>';
    }
  }
}


function attachScrollHandler(conditions) {
  const conditionLinks = document.querySelectorAll('.condition-link');
  
  conditionLinks.forEach(link => {
    link.addEventListener('click', function() {
      const conditionId = this.dataset.conditionId;
      const condition = conditions.find(c => c.id.toString() === conditionId);
      
      if (!condition) return;

      // Handle collection-based conditions
      if (condition.productSelectionType === 'collection' && condition.selectedCollection) {
        const collectionId = condition.selectedCollection.id;
        const cleanId = collectionId.replace('gid://shopify/Collection/', '');
        const collectionSection = document.querySelector(`#collection-${cleanId}`);
        
        if (collectionSection) {
          collectionSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      } 
      // Handle product-based conditions
      else if (condition.productSelectionType === 'product') {
        const individualProductsSection = document.querySelector('.individual-products-section');
        if (individualProductsSection) {
          individualProductsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      }
    });
  });
}

function updateMetaData(bundleDetails) {
  const headerElement = document.querySelector('[data-bundle-header]');
  const descriptionElement = document.querySelector('[data-bundle-description]');
  const topDiscountsContainer = document.querySelector(".template-top-data-discount-info");

  if (headerElement && descriptionElement) {
    headerElement.textContent = 'Choose from selected products';
    descriptionElement.textContent = 'Browse through our curated selection of products.';
  }

  if (!topDiscountsContainer || !window.discountConditions?.tiers) return;

  // Clear existing content
  topDiscountsContainer.innerHTML = '';

  // Get sorted tiers
  const sortedTiers = [...window.discountConditions.tiers].sort((a, b) => 
    parseFloat(a.threshold) - parseFloat(b.threshold)
  );

  sortedTiers.forEach(tier => {
    const thresholdText = window.discountConditions.purchaseRequirement === 'amount'
      ? formatMoney(tier.threshold * 100, shop_money_format)
      : `${tier.threshold} ${tier.threshold > 1 ? 'Products' : 'Product'}`;

    const discountText = getDiscountText(tier.type || window.discountConditions.tierBasedOn, tier.value);

    const discountItem = `
      <div class="discount-info-item">
        <div class="discount-info-item-title">
          <h3>${discountText}</h3>
        </div>
        <div class="discount-info-item-description">
          <p>${thresholdText}</p>
        </div>
      </div>
    `;

    topDiscountsContainer.innerHTML += discountItem;
  });
}

async function fetchProductsDataFromShopify(products) {
  if (!Array.isArray(products)) {
    console.error('Expected array of products, received:', products);
    return [];
  }

  try {
    const productData = await Promise.all(
      products.map(async (item) => {
        // Handle both product and collection items
        const handle = item.handle;
        if (!handle) {
          console.error('Handle not found:', item);
          return null;
        }

        try {
          const response = await fetch(`/products/${handle}.js`);
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          const data = await response.json();
          return {
            ...data,
            featured_image: item.image?.originalSrc || item.image || data.featured_image
          };
        } catch (error) {
          console.error(`Error fetching product ${handle}:`, error);
          return {
            title: item.title,
            handle: item.handle,
            featured_image: item.image?.originalSrc || item.image,
            price: 0,
            id: item.id
          };
        }
      })
    );

    return productData.filter(product => product !== null);
  } catch (error) {
    console.error('Error fetching product data:', error);
    return [];
  }
}


function renderProductItems(productData, containerSelector = '.collection-products-container') {
  try {
    // Store products in window.config object
    window.config.products = productData;
    
    const productsContainer = document.querySelector(containerSelector);
    if (!productsContainer) {
      console.error(`Container not found: ${containerSelector}`);
      return;
    }
    
    productsContainer.innerHTML = `
        ${productData.map(product => `
          <div class="product-card" data-product-id="${parseInt(product.id)}">
            <div class="product-card-wrapper">
              <div class="product-card-image">
                <img
                  src="${product.featured_image}"
                  alt="${product.title}"
                  width="100%"
                  height="100%"
                >
              </div>

              <div class="product-card-content">
                <div class="product-card-top">
                  <div class="product-title">
                    <h4>${product.title}</h4>
                  </div>
                </div>

                <div class="product-card-mid">
                  <div class="product-price">
                    <p>${formatMoney(product.price, shop_money_format)}</p>
                  </div>
                  <div class="product-available-variants">
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
              
              <div class="product-card-cta">
                <div class="add-to-bundle">
                  <button>Add to Cart</button>
                </div>
              </div>
            </div>
          </div>
        `).join('')}
    `;

    attachProductEventListeners();
  } catch (error) {
    console.error('Error rendering products:', error);
  }
}

function renderCollectionProductsVertical(collection) {
  try {
    const id = collection.id.replace('gid://shopify/Collection/', '');
    const collectionProducts = window.config.collectionProducts[id] || [];
    
    // Add collection products to the main products array if they don't exist
    collectionProducts.forEach(product => {
      const formattedProduct = {
        ...product,
        id: String(product.id),
        variants: product.variants || [],
        options: product.options || [],
        title: product.title || '',
        price: product.price || 0,
        featured_image: product.featured_image || ''
      };
      
      const existingProductIndex = window.config.products.findIndex(p => p.id === formattedProduct.id);
      if (existingProductIndex === -1) {
        window.config.products.push(formattedProduct);
      } else {
        // Update existing product with collection data
        window.config.products[existingProductIndex] = {
          ...window.config.products[existingProductIndex],
          ...formattedProduct
        };
      }
    });

    const cleanId = collection.id.replace('gid://shopify/Collection/', '');
    const productsContainer = document.querySelector(`#collection-${cleanId} .collection-products-container`);
    
    if (!productsContainer) {
      console.error(`Container not found for collection: ${collection.title}`);
      return;
    }
    
    productsContainer.innerHTML = `
        ${collectionProducts.map(product => `
          <div class="product-card" data-collection-id="${id}" data-product-id="${parseInt(product.id)}">
            <div class="product-card-wrapper">
              <div class="product-card-image">
                <img
                  src="${product.featured_image}"
                  alt="${product.title}"
                  width="100%"
                  height="100%"
                >
              </div>

              <div class="product-card-content">
                <div class="product-card-top">
                  <div class="product-title">
                    <h4>${product.title}</h4>
                  </div>
                </div>

                <div class="product-card-mid">
                  <div class="product-price">
                    <p>${formatMoney(product.price, shop_money_format)}</p>
                  </div>
                  <div class="product-available-variants">
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
              
              <div class="product-card-cta">
                <div class="add-to-bundle">
                  <button>Add to Cart</button>
                </div>
              </div>
            </div>
          </div>
        `).join('')}
    `;

    attachProductEventListeners();
  } catch (error) {
    console.error('Error rendering collection products:', error);
  }
}

function attachProductEventListeners() {
  // Close button functionality
  const closeButton = document.querySelector('.close-variant-selector button');
  if (closeButton) {
    closeButton.addEventListener('click', closeVariantSelector);
  }

  // Select variant button functionality
  const selectVariantButton = document.querySelector('.product-variant-selector-cta button');
  if (selectVariantButton) {
    selectVariantButton.textContent = 'Add to Cart';
    selectVariantButton.addEventListener('click', handleVariantSelection);
  }

  // Add to bundle buttons
  document.querySelectorAll('.add-to-bundle button').forEach(button => {
    button.addEventListener('click', function() {
      const productCard = this.closest('.product-card');
      if (productCard) {
        addToCart(productCard);
      }
    });
  });

  // Variant selector popup
  document.querySelectorAll('.product-available-variants').forEach(button => {
    button.addEventListener('click', function(e) {
      const productCard = this.closest('.product-card');
      if (!productCard) return;

      // Remove active state from all product cards
      document.querySelectorAll('.product-card').forEach(card => {
        card.removeAttribute('data-active');
      });

      // Set active state on current product card
      productCard.setAttribute('data-active', 'true');

      const productId = parseInt(productCard.dataset.productId);
      
      // First try to find product in main products array
      let product = window.config.products.find(p => parseInt(p.id) === productId);
      
      // If not found, check collection products
      if (!product) {
        for (const collectionId in window.config.collectionProducts) {
          const collectionProduct = window.config.collectionProducts[collectionId].find(
            p => parseInt(p.id) === productId
          );
          if (collectionProduct) {
            product = {
              ...collectionProduct,
              id: String(collectionProduct.id),
              variants: collectionProduct.variants || []
            };
            break;
          }
        }
      }

      if (!product) {
        console.error('Product not found:', productId);
        return;
      }

      if (!product.variants || !product.options) {
        console.error('Product variants or options not found');
        return;
      }

      const variantPopup = document.querySelector('.product-variant-selector');
      if (!variantPopup) return;

      // Update product title
      const productTitle = variantPopup.querySelector('.product-variant-selector-header h3');
      if (productTitle) {
        productTitle.textContent = product.title;
      }

      // Update product image
      const productImage = variantPopup.querySelector('.product-variant-selector-header-image img');
      if (productImage) {
        productImage.src = product.featured_image;
      }

      // Separate color and size options
      const colorOption = product.options.find(option => 
        option.name.toLowerCase().includes('color') || 
        option.name.toLowerCase().includes('colour')
      );
      
      const sizeOption = product.options.find(option => 
        option.name.toLowerCase().includes('size')
      );

      // Update color variants if they exist
      const colorContainer = variantPopup.querySelector('.color-items-container');
      if (colorContainer && colorOption) {
        colorContainer.innerHTML = colorOption.values.map(color => {
          const isAvailable = product.variants.some(variant => {
            const colorValue = variant.options[colorOption.position - 1];
            return colorValue === color && variant.available;
          });
          
          return `
            <div class="pvsc-item ${!isAvailable ? 'disabled' : ''}" data-variant-value="${color}">
              <div class="pvsc-item-image">
                <div class="color-swatch" style="background-color: ${color.toLowerCase()}"></div>
              </div>
              <div class="color-title ${!isAvailable ? 'disabled' : ''}">
                <p>${color}</p>
              </div>
            </div>
          `;
        }).join('');
        
        // Select first available color by default
        const firstAvailableColor = colorContainer.querySelector('.pvsc-item:not(.disabled)');
        if (firstAvailableColor) {
          firstAvailableColor.classList.add('selected');
        }
        
        variantPopup.querySelector('.product-variant-selector-colors').style.display = 'block';
      } else {
        variantPopup.querySelector('.product-variant-selector-colors').style.display = 'none';
      }

      // Update size variants if they exist
      const sizeContainer = variantPopup.querySelector('.size-items-container');
      if (sizeContainer && sizeOption) {
        const selectedColor = colorContainer?.querySelector('.pvsc-item.selected')?.dataset.variantValue;
        
        sizeContainer.innerHTML = sizeOption.values.map(size => {
          const isAvailable = product.variants.some(variant => {
            const sizeValue = variant.options[sizeOption.position - 1];
            const colorValue = selectedColor ? variant.options[colorOption.position - 1] : null;
            return sizeValue === size && variant.available && 
                   (!selectedColor || colorValue === selectedColor);
          });
          
          return `
            <div class="pvsc-item ${!isAvailable ? 'disabled' : ''}" data-variant-value="${size}">
              <div class="size ${!isAvailable ? 'disabled' : ''}">
                <p>${size}</p>
              </div>
            </div>
          `;
        }).join('');
        
        // Select first available size by default
        const firstAvailableSize = sizeContainer.querySelector('.pvsc-item:not(.disabled)');
        if (firstAvailableSize) {
          firstAvailableSize.classList.add('selected');
        }
        
        variantPopup.querySelector('.product-variant-selector-size').style.display = 'block';
      } else {
        variantPopup.querySelector('.product-variant-selector-size').style.display = 'none';
      }

      // Show the popup
      variantPopup.classList.remove('closed');

      // Handle variant selection
      variantPopup.querySelectorAll('.pvsc-item:not(.disabled)').forEach(item => {
        item.addEventListener('click', function() {
          const container = this.closest('.pvsc-items-container');
          container.querySelectorAll('.pvsc-item').forEach(i => 
            i.classList.remove('selected')
          );
          this.classList.add('selected');
          
          // If this is a color selection, update available sizes
          if (container.classList.contains('color-items-container')) {
            updateAvailableSizes(product, this.dataset.variantValue);
          }
        });
      });
    });
  });

  // Helper function to update available sizes based on color selection
  function updateAvailableSizes(product, selectedColor) {
    const sizeContainer = document.querySelector('.size-items-container');
    if (!sizeContainer) return;
    
    const sizeOption = product.options.find(option => 
      option.name.toLowerCase().includes('size')
    );
    
    if (!sizeOption) return;
    
    sizeContainer.querySelectorAll('.pvsc-item').forEach(sizeItem => {
      const size = sizeItem.dataset.variantValue;
      const isAvailable = product.variants.some(variant => 
        variant.option_values.some(opt => opt.value === size && variant.available) &&
        variant.option_values.some(opt => opt.value === selectedColor)
      );
      
      sizeItem.classList.toggle('disabled', !isAvailable);
      
      // Update or add unavailable label
      const existingLabel = sizeItem.querySelector('.unavailable-label');
      if (!isAvailable && !existingLabel) {
        sizeItem.querySelector('.size').insertAdjacentHTML('beforeend', '<span class="unavailable-label">Sold out</span>');
      } else if (isAvailable && existingLabel) {
        existingLabel.remove();
      }
    });
    
    // If current selected size is now unavailable, select first available size
    const currentSelected = sizeContainer.querySelector('.selected');
    if (currentSelected?.classList.contains('disabled')) {
      currentSelected.classList.remove('selected');
      const firstAvailable = sizeContainer.querySelector('.pvsc-item:not(.disabled)');
      if (firstAvailable) {
        firstAvailable.classList.add('selected');
      }
    }
  }
}


function closeVariantSelector() {
  const variantPopup = document.querySelector('.product-variant-selector');
  if (variantPopup) {
    variantPopup.classList.add('closed');
  }
}

function handleVariantSelection() {
  const variantPopup = document.querySelector('.product-variant-selector');
  const productCard = document.querySelector('.product-card[data-active="true"]');
  
  if (!variantPopup || !productCard) return;

  let product = null;  
  const productId = productCard.dataset.productId;
  const collectionId = productCard.dataset.collectionId;
  if(collectionId){
       product = window.config.collectionProducts[collectionId].find(p => parseInt(p.id)=== parseInt(productId))
    }else{
      product = window.config.products.find(p => parseInt(p.id) === parseInt(productId));
    }
  
    if (!product) return;

  // Get selected color and size
  const selectedColor = variantPopup.querySelector('.color-items-container .pvsc-item.selected')?.dataset.variantValue;
  const selectedSize = variantPopup.querySelector('.size-items-container .pvsc-item.selected')?.dataset.variantValue;
  
  // Find the matching variant
  const selectedVariant = product.variants.find(variant => {
    const colorOptionIndex = product.options.findIndex(opt => 
      opt.name.toLowerCase().includes('color') || 
      opt.name.toLowerCase().includes('colour')
    );
    
    const sizeOptionIndex = product.options.findIndex(opt => 
      opt.name.toLowerCase().includes('size')
    );

    const variantColor = colorOptionIndex !== -1 ? variant.options[colorOptionIndex] : null;
    const variantSize = sizeOptionIndex !== -1 ? variant.options[sizeOptionIndex] : null;

    const colorMatches = !selectedColor || variantColor === selectedColor;
    const sizeMatches = !selectedSize || variantSize === selectedSize;

    return colorMatches && sizeMatches && variant.available;
  });

  if (selectedVariant) {
    // Add to cart directly
    updateSideCart(product, selectedVariant);
  }

  // Close the variant selector
  closeVariantSelector();
}

function addToCart(productCard) {
  let product = null;
  const productId = productCard.dataset.productId;

  const collectionId = productCard.dataset.collectionId;
  if(collectionId){
       product = window.config.collectionProducts[collectionId].find(p => parseInt(p.id)=== parseInt(productId))
    }else{
      product = window.config.products.find(p => parseInt(p.id) === parseInt(productId));
    }

   
  
  if (!product || !product.variants || !product.variants.length) {
    console.error('Product or variants not found');
    return;
  }

  // If product has only one variant, add it directly
  if (product.variants.length === 1) {
    updateSideCart(product, product.variants[0]);
    return;
  }

  // For products with multiple variants, always open variant selector
  const variantDisplay = productCard.querySelector('.product-available-variants');
  if (!variantDisplay) {
    console.error('Variant display not found');
    return;
  }

  // Trigger variant selector popup
  variantDisplay.click();
}

function updateSideCart(product, variant, quantity = 1) {
  if (!window.sideCart) {
    window.sideCart = {
      items: [],
      subtotal: 0,
      discount: 0,
      total: 0
    };
  }

  const existingItemIndex = window.sideCart.items.findIndex(item => String(item.id) === String(variant.id));
  
  if (existingItemIndex !== -1) {
    // Update existing item
    const existingItem = window.sideCart.items[existingItemIndex];
    existingItem.quantity += quantity;
    window.sideCart.subtotal += variant.price * quantity;
  } else {
    // Create new cart item
    const cartItem = {
      id: variant.id,
      productId: product.id,
      title: product.title,
      image: product.featured_image,
      variant: {
        color: product.options.findIndex(opt => opt.name.toLowerCase().includes('color') || opt.name.toLowerCase().includes('colour')) !== -1 
          ? variant.options[product.options.findIndex(opt => opt.name.toLowerCase().includes('color') || opt.name.toLowerCase().includes('colour'))] 
          : null,
        size: product.options.findIndex(opt => opt.name.toLowerCase().includes('size')) !== -1 
          ? variant.options[product.options.findIndex(opt => opt.name.toLowerCase().includes('size'))] 
          : null
      },
      price: variant.price,
      quantity: quantity
    };

    window.sideCart.items.unshift(cartItem);
    window.sideCart.subtotal += variant.price * quantity;
  }

  window.sideCart.discount = calculateTieredDiscount(window.sideCart.items);
  window.sideCart.total = window.sideCart.subtotal - window.sideCart.discount;

  renderSideCart();
  updateCartTotals();
  // Add this new section to update discount headers for tiered discounts
  if (window.discountConditions?.discountType === 'tiered') {
    const discountStepperContainer = document.querySelectorAll('.discount-stepper');
    const discountInfoHeaders = document.querySelectorAll('.discount-info-container-header h3');
    updateTieredSteppers(window.discountConditions.tiers, discountStepperContainer, discountInfoHeaders);
  } else {
    // For normal discounts
    updateDiscountSteppers(window.discountConditions?.conditions || []);
  }
}

function calculateTieredDiscount(cartItems) {
  if (!window.discountConditions?.tiers || !Array.isArray(window.discountConditions.tiers)) {
    console.log('No valid tiers found');
    return 0;
  }

  const { tierBasedOn, tiers } = window.discountConditions;
  let baseValue = 0;

  try {
    baseValue = calculateTierBaseValue(cartItems);
    const subtotalInCents = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);

    // console.log('Base Value Calculation:', {
    //   tierBasedOn,
    //   baseValue,
    //   subtotalInCents,
    //   totalItems
    // });

    const applicableTier = findApplicableTier(baseValue);
    if (!applicableTier) return 0;

    // console.log('Applicable Tier:', applicableTier);

    let discountAmount = 0;
    switch (tierBasedOn) {
      case 'percentage':
        // Calculate percentage of the subtotal
        discountAmount = Math.floor((subtotalInCents * parseFloat(applicableTier.value)) / 100);
        break;
      case 'fixed-amount':
        // Fixed amount off the total
        discountAmount = parseFloat(applicableTier.value) * 100;
        break;
      case 'price':
        // Set total price to this amount
        const targetPrice = parseFloat(applicableTier.value) * 100;
        discountAmount = Math.max(0, subtotalInCents - targetPrice);
        break;
      case 'per-item':
        // Discount per item
        const perItemDiscount = parseFloat(applicableTier.value) * 100;
        discountAmount = perItemDiscount * totalItems;
        break;
      default:
        discountAmount = 0;
    }

    // console.log('Discount Calculation Result:', {
    //   type: tierBasedOn,
    //   value: applicableTier.value,
    //   baseValue,
    //   subtotalInCents,
    //   discountAmount
    // });

    return Math.round(discountAmount);
  } catch (error) {
    console.error('Error calculating discount:', error);
    return 0;
  }
}

function renderSideCart() {
  const sideCartContainer = document.querySelector('.side-cart-products');
  if (!sideCartContainer) return;

  // Update cart count
  const addedProductsCount = document.querySelector('.added-products-count');
  if (addedProductsCount) {
    addedProductsCount.textContent = window.sideCart.items.length;
  }

  if(window.sideCart.items.length < 1){
    return sideCartContainer.innerHTML = `
    <div class="cart-empty">Cart Empty</div>
    `
  }

  // Render cart items
  sideCartContainer.innerHTML = window.sideCart.items.map(item => `
    <div class="sc-product-item" data-variant-id="${item.id}">
      <div class="scpt-image">
        <img
          src="${item.image}"
          alt="${item.title}"
          width="100%"
          height="100%"
        >
      </div>
      <div class="scpt-content">
        <div class="scpt-title">
          <h4>${item.title}</h4>
        </div>
        ${item.variant.color || item.variant.size ? `
          <div class="scpt-variant">
            <p>${[item.variant.color, item.variant.size].filter(Boolean).join('/')}</p>
          </div>
        ` : ''}
        <div class="scpt-price-wrapper">
          <div class="quantity-controls">
            <button class="quantity-btn minus" aria-label="Decrease quantity">-</button>
            <input 
              type="number" 
              class="quantity-input" 
              value="${item.quantity}"
              min="1"
              max="${item.inventory_quantity}"
              data-inventory="${item.inventory_quantity}"
              aria-label="Item quantity"
            >
            <button class="quantity-btn plus" aria-label="Increase quantity">+</button>
          </div>
          <div class="scpt-price new-price">
            <p>${formatMoney(item.price, shop_money_format)}</p>
          </div>
        </div>
      </div>

      <div class="scpt-remove-item">
        <button onclick="removeFromSideCart('${item.id}')">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="24" height="24" rx="12" fill="#0F0F0F"/>
            <path d="M14.8281 9.17188L9.17127 14.8287" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M9.17188 9.17188L14.8287 14.8287" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
      </div>
    </div>
  `).join('');

  // Update totals
  updateCartTotals();
  
  // Attach quantity event listeners
  attachQuantityListeners();
}

function removeFromSideCart(variantId) {
  if (!window.sideCart || !window.sideCart.items) return;

  const itemIndex = window.sideCart.items.findIndex(item => String(item.id) === String(variantId));

  if (itemIndex > -1) {
    const item = window.sideCart.items[itemIndex];
    window.sideCart.subtotal -= item.price * item.quantity;
    window.sideCart.items.splice(itemIndex, 1);
    window.sideCart.discount = calculateTieredDiscount(window.sideCart.items);
    window.sideCart.total = window.sideCart.subtotal - window.sideCart.discount;
    renderSideCart();
    
    // Update tiered discount UI
    const discountStepperContainer = document.querySelectorAll('.discount-stepper');
    const discountInfoHeaders = document.querySelectorAll('.discount-info-container-header h3');
    updateTieredSteppers(window.discountConditions.tiers, discountStepperContainer, discountInfoHeaders);
  } else {
    console.error('Item not found in cart with variantId:', variantId);
  }
}

function updateCartTotals() {
  const subtotalElement = document.querySelector('.side-cart-checkout-item.subtotal p:last-child');
  const discountElement = document.querySelector('.side-cart-checkout-item.discount p:last-child');
  const totalElement = document.querySelector('.side-cart-checkout-item.total p:last-child');

  if (subtotalElement) {
    // subtotalElement.innerHTML = `<span>$</span>${((window.sideCart?.subtotal || 0) / 100).toFixed(2)}`;
    subtotalElement.innerHTML = formatMoney(window.sideCart?.subtotal || 0, shop_money_format);

  }

  if (discountElement) {
    const discountAmount = window.sideCart?.discount || 0;
    const cartItems = window.sideCart?.items || [];
    const baseValue = calculateTierBaseValue(cartItems);
    const applicableTier = findApplicableTier(baseValue);
    const discountText = applicableTier ? ` (-${getDiscountText(applicableTier.type, applicableTier.value)})` : '';
    
    discountElement.innerHTML = `${formatMoney(discountAmount, shop_money_format)}${discountText}`;
  }

  if (totalElement) {
    totalElement.innerHTML = formatMoney(window.sideCart?.total || 0, shop_money_format);
  }
}

function findApplicableTier(baseValue) {
  if (!window.discountConditions?.tiers || !Array.isArray(window.discountConditions.tiers)) {
    return null;
  }

  // console.log('Finding applicable tier:', {
  //   baseValue,
  //   availableTiers: window.discountConditions.tiers
  // });

  const sortedTiers = [...window.discountConditions.tiers]
    .filter(tier => tier && typeof tier.threshold === 'number')
    .sort((a, b) => b.threshold - a.threshold); // Sort in descending order

  // For total_price, thresholds are in dollars, for items they're counts
  const applicableTier = sortedTiers.find(tier => {
    const threshold = parseFloat(tier.threshold);
    return baseValue >= threshold;
  });
  
  // console.log('Selected tier:', applicableTier);
  
  return applicableTier || null;
}

function attachQuantityListeners() {
  document.querySelectorAll('.sc-product-item').forEach(item => {
    const minusBtn = item.querySelector('.quantity-btn.minus');
    const plusBtn = item.querySelector('.quantity-btn.plus');
    const input = item.querySelector('.quantity-input');
    const variantId = item.dataset.variantId;

    if (minusBtn && plusBtn && input) {
      // Prevent manual input changes
      input.addEventListener('keydown', (e) => {
        e.preventDefault();
        return false;
      });

      // Prevent direct input changes
      input.addEventListener('change', (e) => {
        e.preventDefault();
        if (isMaxTierReached()) {
          e.target.value = input.getAttribute('data-last-value') || e.target.value;
          return false;
        }
        updateItemQuantity(variantId, parseInt(e.target.value));
        return false;
      });

      minusBtn.addEventListener('click', (e) => {
        e.preventDefault();
        const currentQty = parseInt(input.value);
        updateItemQuantity(variantId, Math.max(1, currentQty - 1));
      });

      plusBtn.addEventListener('click', (e) => {
        e.preventDefault();
        if (isMaxTierReached()) return;
        const currentQty = parseInt(input.value);
        updateItemQuantity(variantId, currentQty + 1);
      });

      // Store the current value for reference
      input.setAttribute('data-last-value', input.value);
    }
  });
}

function isMaxTierReached() {
  if (!window.discountConditions?.tiers || !window.sideCart?.items) return false;
  
  const cartItems = window.sideCart.items;
  const baseValue = calculateTierBaseValue(cartItems);
  const sortedTiers = [...window.discountConditions.tiers].sort((a, b) => b.threshold - a.threshold);
  const maxTier = sortedTiers[0];
  const currentTier = findApplicableTier(baseValue);
  
  return currentTier && currentTier.threshold === maxTier.threshold;
}

function updateItemQuantity(variantId, newQuantity) {
  // console.log('UpdateItemQuantity called:', { variantId, newQuantity });
  
  if (newQuantity < 1) return;

  const itemIndex = window.sideCart.items.findIndex(item => String(item.id) === String(variantId));
  if (itemIndex === -1) {
    console.error('Item not found in cart:', variantId);
    return;
  }

  const item = window.sideCart.items[itemIndex];
  // console.log('Found item:', item);
  
  const oldQuantity = item.quantity;
  item.quantity = newQuantity;
  
  window.sideCart.subtotal += item.price * (newQuantity - oldQuantity);
  window.sideCart.discount = calculateTieredDiscount(window.sideCart.items);
  window.sideCart.total = window.sideCart.subtotal - window.sideCart.discount;

  // call renderSideCart
  renderSideCart();
  
  // Update the discount steppers
    const discountStepperContainer = document.querySelectorAll('.discount-stepper');
    const discountInfoHeaders = document.querySelectorAll('.discount-info-container-header h3');
    updateTieredSteppers(window.discountConditions.tiers, discountStepperContainer, discountInfoHeaders);
}

function populateDiscountCondition(bundleData) {
  if (!bundleData) return;
    try {
      // Handle tiered discount
      const tiers = JSON.parse(bundleData.tiers || '[]');
      if (!Array.isArray(tiers) || tiers.length === 0) {
        console.error('Invalid tiers data');
        return;
      }

      const discountCondition = {
        discountType: 'tiered',
        tierBasedOn: bundleData.tierBasedOn,
        purchaseRequirement: bundleData.purchaseRequirement,
        tiers: tiers.map(tier => ({
          ...tier,
          threshold: parseFloat(tier.requirement) || 0,
          value: parseFloat(tier.value) || 0,
          type: tier.type || 'percentage'
        }))
      };
      window.discountConditions = discountCondition;
      updateDiscountSteppers(discountCondition.tiers);
      updateMetaData(bundleData);

    } catch (error) {
      console.error('Error parsing tiers:', error);
    }
}

function getDiscountText(discountType, value) {
  const tierBasedOn = window.discountConditions?.tierBasedOn;
  
  switch (tierBasedOn) {
    case 'percentage':
      return `${value}% OFF`;
    case 'fixed-amount':
      return `${formatMoney(value * 100,shop_money_format)} OFF`;
    case 'price':
      return `Fixed price ${formatMoney(value * 100,shop_money_format)}`;
    case 'per-item':
      return `${formatMoney(value * 100,shop_money_format)} OFF per item`;
    default:
      return `${formatMoney(value * 100,shop_money_format)} OFF`;
  }
}

function calculateTierBaseValue(cartItems) {
  const { tierBasedOn, purchaseRequirement } = window.discountConditions;
  
  // For amount-based requirements, always use total price
  if (purchaseRequirement === 'amount') {
    const totalInCents = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    return totalInCents / 100; // Convert to dollars for threshold comparison
  }

  // For quantity-based requirements
  if (tierBasedOn === 'total_price') {
    const totalInCents = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    return totalInCents / 100;
  }
  // For item count
  return cartItems.reduce((sum, item) => sum + item.quantity, 0);
}

function formatTierRemaining(tier, currentValue) {
  const remaining = tier.threshold - currentValue;
  const { purchaseRequirement } = window.discountConditions;

  // Always show money format for amount-based requirements
  if (purchaseRequirement === 'amount') {
    return formatMoney(remaining * 100, shop_money_format);
  }

  // For quantity-based requirements
  return window.discountConditions.tierBasedOn === 'total_price'
    ? formatMoney(remaining * 100, shop_money_format)
    : `${remaining} ${remaining === 1 ? 'item' : 'items'}`;
}

function getPreDiscountText(purchaseRequirement) {
  if (!purchaseRequirement) {
    return "buy";
  }
  switch (purchaseRequirement) {
    case 'quantity': 
      return "Add";
    case 'amount': 
      return "Spend";
    default: 
      return "Buy"; 
  }
}

function updateTieredSteppers(tiers, stepperContainers, infoHeaders) {
  if (!Array.isArray(tiers) || !stepperContainers) return;
  
  const cartItems = window.sideCart?.items || [];
  const baseValue = calculateTierBaseValue(cartItems);
  
  // Sort tiers by threshold in ascending order (lowest to highest)
  const sortedTiers = [...tiers].sort((a, b) => a.threshold - b.threshold);
  const maxTier = sortedTiers[sortedTiers.length - 1];
  const currentTier = findApplicableTier(baseValue);
  
  // Check if we've reached the maximum tier
  const isMaxTierReached = currentTier && currentTier.threshold === maxTier.threshold;
  
  // Disable/enable add to cart buttons and quantity controls
  const addToCartButtons = document.querySelectorAll('.add-to-bundle button');
  const quantityControls = document.querySelectorAll('.quantity-btn.plus');
  const quantityInputs = document.querySelectorAll('.quantity-input');
  
  addToCartButtons.forEach(button => {
    button.disabled = isMaxTierReached;
    button.classList.toggle('disabled', isMaxTierReached);
  });

  quantityControls.forEach(control => {
    control.disabled = isMaxTierReached;
    control.classList.toggle('disabled', isMaxTierReached);
  });

  quantityInputs.forEach(input => {
    input.readOnly = isMaxTierReached;
    if (isMaxTierReached) {
      input.setAttribute('data-last-value', input.value);
    }
  });

  stepperContainers.forEach(container => {
    if (!container) return;
    container.innerHTML = '';
    
    sortedTiers.forEach(tier => {
      if (!tier) return;
      
      const stepItem = document.createElement('div');
      stepItem.classList.add('discount-stepper-item');
      
      // Add class to indicate if this tier is active or completed
      if (baseValue >= tier.threshold) {
        stepItem.classList.add('active');
      } else if (currentTier && tier.threshold === currentTier.threshold) {
        stepItem.classList.add('active');
      }
      
      const thresholdText = window.discountConditions.purchaseRequirement === 'amount'
        ? formatMoney(tier.threshold * 100, shop_money_format)
        : window.discountConditions.tierBasedOn === 'total_price'
          ? formatMoney(tier.threshold * 100, shop_money_format)
          : `${tier.threshold} items`;

      stepItem.innerHTML = `
        <div class="discount-condition">
          <p>${getPreDiscountText(window.discountConditions.purchaseRequirement)} ${thresholdText}</p>
        </div>
        <div class="discount-value">
          <p>${getDiscountText(tier.type || window.discountConditions.tierBasedOn, tier.value)}</p>
        </div>
      `;
      container.appendChild(stepItem);
    });
  });

  // Update header content based on next achievable tier
  let headerContent;
  if (isMaxTierReached) {
    headerContent = 'Maximum discount tier reached!';
  } else {
    const nextTier = sortedTiers.find(tier => tier.threshold > baseValue);
    if (nextTier) {
      headerContent = `${getPreDiscountText(window.discountConditions.purchaseRequirement)} ${formatTierRemaining(nextTier, baseValue)} more to get ${getDiscountText(nextTier.type || 'percentage', nextTier.value || 0)}!`;
    } else {
      headerContent = 'Add items to start earning discounts!';
    }
  }

  infoHeaders.forEach(header => {
    if (header) header.innerHTML = headerContent;
  });
}

function updateDiscountSteppers(conditions) {
     const discountStepperContainer = document.querySelectorAll('.discount-stepper');
     const discountInfoHeaders = document.querySelectorAll('.discount-info-container-header h3');
    updateTieredSteppers(conditions, discountStepperContainer, discountInfoHeaders);

}

function addToSideCart(variant, product, quantity = 1) {
  if (!window.sideCart) {
    window.sideCart = {
      items: [],
      subtotal: 0,
      discount: 0,
      total: 0
    };
  }

  const existingItem = window.sideCart.items.find(item => String(item.id) === String(variant.id));
  
  if (existingItem) {
    // Update existing item
    const newQuantity = existingItem.quantity + quantity;
    existingItem.quantity = newQuantity;
    window.sideCart.subtotal += variant.price * quantity;
  } else {
    // Create new cart item
    const cartItem = {
      id: variant.id,
      productId: product.id,
      title: product.title,
      image: product.featured_image,
      variant: {
        color: product.options.findIndex(opt => opt.name.toLowerCase().includes('color') || opt.name.toLowerCase().includes('colour')) !== -1 
          ? variant.options[product.options.findIndex(opt => opt.name.toLowerCase().includes('color') || opt.name.toLowerCase().includes('colour'))] 
          : null,
        size: product.options.findIndex(opt => opt.name.toLowerCase().includes('size')) !== -1 
          ? variant.options[product.options.findIndex(opt => opt.name.toLowerCase().includes('size'))] 
          : null
      },
      price: variant.price,
      quantity: quantity
    };

    window.sideCart.items.unshift(cartItem);
    window.sideCart.subtotal += variant.price * quantity;
  }

  window.sideCart.discount = calculateTieredDiscount(window.sideCart.items);
  window.sideCart.total = window.sideCart.subtotal - window.sideCart.discount;

  renderSideCart();
}

function sideCartRenderer() {
    const sideCartContainer = document.querySelector('.side-cart-container');
    const sideCartToggler = document.querySelector('.side-cart-toggler');
    const mainContent = document.querySelector('.main-product-content-container');

    if (!sideCartContainer || !sideCartToggler || !mainContent) {
      console.warn('Required elements not found for sideCartRenderer');
      return;
    }

    // Observer for main content position
    const contentObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (window.innerWidth >= 1024) return;

          const intersectionRatio = entry.intersectionRatio;

          if (intersectionRatio >= 0.8) {
            // When 80% or more is in viewport
            requestAnimationFrame(() => {
              sideCartContainer.classList.add('side-cart-shrink');
            });
          } else if (intersectionRatio <= 0.3) {
            // When 70% or more is out of viewport
            requestAnimationFrame(() => {
              sideCartContainer.classList.remove('side-cart-shrink', 'side-cart-expand');
            });
          }
        });
      },
      {
        threshold: [0.3, 0.8], // Observe at 30% and 80% visibility thresholds
      }
    );

    if (mainContent) {
      contentObserver.observe(mainContent);
    }

    // Create mutation observer to watch for class changes
    const mutationObserver = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
          const currentClasses = sideCartContainer.classList;
          if (currentClasses.contains('side-cart-shrink') && currentClasses.contains('side-cart-expand')) {
            currentClasses.remove('side-cart-shrink');
          }
        }
      });
    });

    mutationObserver.observe(sideCartContainer, {
      attributes: true,
      attributeFilter: ['class'],
    });

    // Toggle functionality
    sideCartToggler.addEventListener('click', function () {
      if (sideCartContainer.classList.contains('side-cart-shrink')) {
        sideCartContainer.classList.remove('side-cart-shrink');
        sideCartContainer.classList.add('side-cart-expand');
      } else if (sideCartContainer.classList.contains('side-cart-expand')) {
        sideCartContainer.classList.remove('side-cart-expand');
        sideCartContainer.classList.add('side-cart-shrink');
      }
    });

    // Handle resize
    const resizeObserver = new ResizeObserver((entries) => {
      if (window.innerWidth >=1024) {
        sideCartContainer.classList.remove('side-cart-shrink', 'side-cart-expand');
      }
    });

    resizeObserver.observe(document.body);
}

function handleCheckout() {
  const checkoutButton = document.querySelector('.side-cart-checkout-cta button');
  if (!checkoutButton || !window.sideCart?.items?.length) return;

  // Disable button and show loading state
  checkoutButton.disabled = true;
  checkoutButton.textContent = 'Adding...';

  // Prepare items for Shopify cart
  const itemsCart = window.sideCart.items.map(item => ({
    id: item.id,
    quantity: item.quantity
  }));

  // console.log(itemsCart)

  // Create form data with bundle properties
  const formData = {
    items: [{
      id: {{ product.variants[0].id }}, 
      quantity: 1,
      properties: {
        __byob: JSON.stringify(itemsCart),
        __totalByob: (window.sideCart.total / 100).toFixed(2),
      }
    }]
  };

  // Add to cart using Shopify Cart API
  fetch(window.Shopify.routes.root + 'cart/add.js', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(formData)
  })
  .then(response => response.json())
  .then(data => {
    checkoutButton.textContent = 'Redirecting to cart...';
    
    // Clear side cart
    window.sideCart = {
      items: [],
      subtotal: 0,
      discount: 0,
      total: 0
    };
    renderSideCart();
    
    // Redirect to cart page
    setTimeout(() => {
      window.location.href = '/cart';
    }, 1000);
  })
  .catch((error) => {
    console.error('Error:', error);
    checkoutButton.disabled = false;
    checkoutButton.textContent = 'Add to Cart';
    alert('There was an error adding items to cart. Please try again.');
  });
}

// In your main initialization code
document.addEventListener('DOMContentLoaded', function() {
  const bundleData = fetchProductsFromDatabase();
  updateMetaData(bundleData)
  const bundleDetails = extractProductDetailsFromBundle(JSON.parse(bundleData.conditions));
  handleBundleData(bundleDetails,JSON.parse(bundleData.conditions));
  populateDiscountCondition(bundleData);
  
  // Add side cart checkout button listener
  const checkoutButton = document.querySelector('.side-cart-checkout-cta button');
  if (checkoutButton) {
    checkoutButton.addEventListener('click', handleCheckout);
  }
  sideCartRenderer();

  
});
</script>
