{% comment %} default section {% endcomment %}

<link rel="stylesheet" href="{{ 'product-byob.css' | asset_url }}">

<div class="bundlesuite-container">
  <div class="banner-image">
    <img
      src="https://s3-alpha-sig.figma.com/img/887a/054d/fce13d95ea9bfebf16ec9a02f5d7a9a4?Expires=1734912000&Key-Pair-Id=APKAQ4GOSFWCVNEHN3O4&Signature=QVweIohtsK8EJ2Akk4~c5jRH75DBXwBXVbgtHVuuuw~gNJ9TNT0nCNY5LE0xpi-N0~slx0Glnje5iaWF~ca9k6I88O9g8K7d7g2rk8bXNUXtqZCQbipiFL4pPvzzpuCrV-TDJassGE1hn1HZB8mbZGdlu5kYTE9WbxGoBZPpUhVNmMCmOnGqbzxqHFn1Q~su8oESCn3-paTGI1qh~kVDs8jr~k1wuNksPE5L0Ua-qvkmrwijunummMrgy-u85euJvS0BE-hY7-~LuHNAI9mEGmu-rYPdd1ty-~VCGp-3vfeIcnsEy~ZKtF~K0swDWl1nrDc4yZoD8nem8PvFdioTig__"
      height="100%"
      width="100%"
      alt=""
    >
  </div>

  <div class="bundlesuite-container-content">
    <div class="template-top-data">
      <div class="template-top-data-header">
        <div class="template-top-data-header-title">
          <h2>Build your BundleSuite</h2>
        </div>
        <div class="template-top-data-header-description">
          <p>
            Build your snack box by selecting any 5 products from 6 products and get discount for more products you add.
          </p>
        </div>
      </div>
      <div class="template-top-data-discount-info">
        <div class="discount-info-item">
          <div class="discount-info-item-title">
            <h3>15% off</h3>
          </div>
          <div class="discount-info-item-description">
            <p>1 Product</p>
          </div>
        </div>
        <div class="discount-info-item">
          <div class="discount-info-item-title">
            <h3>15% off</h3>
          </div>
          <div class="discount-info-item-description">
            <p>1 Product</p>
          </div>
        </div>
      </div>
    </div>

    <div class="template-product-discount-container">
      <div class="product-variant-selector closed">
        <div class="product-variant-selector-wrapper">
          <div class="close-variant-selector">
            <button>
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect width="24" height="24" rx="12" fill="#0F0F0F"/>
                <path d="M14.8281 9.17188L9.17127 14.8287" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M9.17188 9.17188L14.8287 14.8287" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button>
          </div>

          <div class="product-variant-selector-content">
            <div class="product-variant-selector-header">
              <h3>Art De La Table bainville t-shirt</h3>
            </div>
          </div>

          <div class="product-variant-selector-colors product-variant-selector-section">
            <div class="pvsc-header color-header">
              <p>Select a colour variation for the selected product</p>
            </div>
            <div class="pvsc-items-container color-items-container">
              <div class="pvsc-item">
                <div class="pvsc-item-image">
                  <img
                    src="https://cdn.shopify.com/s/files/1/0915/6725/9955/files/image.png?v=1734352604"
                    alt=""
                    width="100%"
                    height="100%"
                  >
                </div>
                <div class="pvsc-item-title">
                  <h4>Forest green</h4>
                </div>
              </div>
              <div class="pvsc-item">
                <div class="pvsc-item-image">
                  <img
                    src="https://cdn.shopify.com/s/files/1/0915/6725/9955/files/image.png?v=1734352604"
                    alt=""
                    width="100%"
                    height="100%"
                  >
                </div>
                <div class="pvsc-item-title">
                  <h4>Forest green</h4>
                </div>
              </div>
              <div class="pvsc-item">
                <div class="pvsc-item-image">
                  <img
                    src="https://cdn.shopify.com/s/files/1/0915/6725/9955/files/image.png?v=1734352604"
                    alt=""
                    width="100%"
                    height="100%"
                  >
                </div>
                <div class="pvsc-item-title">
                  <h4>Forest green</h4>
                </div>
              </div>
            </div>
          </div>

          <div class="product-variant-selector-size product-variant-selector-section">
            <div class="pvsc-header size-header">
              <p>Select a size variation for the selected product</p>
            </div>
            <div class="pvsc-items-container size-items-container">
              <div class="pvsc-item">
                <div class="size">
                  <p>S</p>
                </div>
              </div>
              <div class="pvsc-item selected">
                <div class="size">
                  <p>S</p>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="product-variant-selector-cta">
          <button>select variant</button>
        </div>
      </div>
      <div class="tpdc-wrapper">
        <div class="main-product-content-container">
          <div class="discount-stepper-container">
            <div class="discount-stepper">
              <div class="discount-stepper-item active">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
              <div class="discount-stepper-item active">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
              <div class="discount-stepper-item">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
              <div class="discount-stepper-item">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
            </div>

            <div class="discount-info-container">
              <div class="discount-info-container-header">
                <h3>
                  <svg width="19" height="24" viewBox="0 0 19 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M1.6 23.32C1.57333 23.3467 1.46667 23.3067 1.28 23.2C1.12 23.12 0.973333 23.0267 0.84 22.92C0.706667 22.8133 0.653333 22.7467 0.68 22.72L17.88 0.96C17.9333 0.879999 18.04 0.893333 18.2 1C18.36 1.08 18.5067 1.18666 18.64 1.32C18.7733 1.45333 18.8133 1.54667 18.76 1.6L1.6 23.32ZM13.08 23.2C11.8267 23.2 10.8667 22.7067 10.2 21.72C9.56 20.7067 9.37333 19.48 9.64 18.04C9.8 17.08 10.1333 16.2133 10.64 15.44C11.1467 14.6667 11.7733 14.0533 12.52 13.6C13.2667 13.1467 14.0533 12.92 14.88 12.92C16.1067 12.92 17.0267 13.4267 17.64 14.44C18.28 15.4533 18.4667 16.6667 18.2 18.08C17.9333 19.52 17.32 20.7333 16.36 21.72C15.4267 22.7067 14.3333 23.2 13.08 23.2ZM13.4 22.6C14.2 22.6 14.76 22.2 15.08 21.4C15.4267 20.6 15.68 19.5867 15.84 18.36C16.08 16.76 16.08 15.56 15.84 14.76C15.6267 13.9333 15.2 13.52 14.56 13.52C13.7867 13.52 13.2 13.9467 12.8 14.8C12.4267 15.6267 12.16 16.6533 12 17.88C11.76 19.2133 11.7333 20.3333 11.92 21.24C12.1067 22.1467 12.6 22.6 13.4 22.6ZM5.28 10.88C4.02667 10.88 3.08 10.3867 2.44 9.4C1.8 8.38667 1.61333 7.14667 1.88 5.68C2.04 4.74667 2.37333 3.89333 2.88 3.12C3.38667 2.34667 4.01333 1.73333 4.76 1.28C5.50667 0.826666 6.29333 0.6 7.12 0.6C8.37333 0.6 9.30667 1.10667 9.92 2.12C10.5333 3.13333 10.7067 4.36 10.44 5.8C10.1733 7.21333 9.56 8.41333 8.6 9.4C7.64 10.3867 6.53333 10.88 5.28 10.88ZM5.6 10.32C6.37333 10.32 6.92 9.92 7.24 9.12C7.58667 8.32 7.85333 7.30667 8.04 6.08C8.30667 4.48 8.32 3.26667 8.08 2.44C7.86667 1.61333 7.44 1.2 6.8 1.2C6 1.2 5.41333 1.62667 5.04 2.48C4.66667 3.33333 4.38667 4.36 4.2 5.56C3.98667 6.89333 3.97333 8.02667 4.16 8.96C4.34667 9.86667 4.82667 10.32 5.6 10.32Z" fill="white"/>
                  </svg>
                  Add 2 more items for maximum discount of 35%!
                </h3>
              </div>
            </div>
          </div>

          <div class="main-wrapper">
            <div class="collection-info-container">
              <div class="collection-info-container-header">
                <h3 data-bundle-header>Choose products from any two collections</h3>
              </div>
              <div class="collection-info-container-content">
                <p data-bundle-description>Select collections to view all the available products in one list.</p>
              </div>
            </div>

            <div class="collection-tab-links-container">
              <div class="tab-link-item">
                <p>Collection 1</p>
              </div>
              <div class="tab-link-item">
                <p>Collection 2</p>
              </div>
            </div>

            <div class="collection-tab-content-container">
              <div class="collection-tab-content-item">
                <div class="collection-products-container-header">
                  <p>(6 Products)</p>
                </div>
                <div class="collection-products-container">
                  loading...
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="side-cart-container">
          <div class="side-cart-header">
            <div class="cart-head">
              <h3>Cart</h3>
            </div>
            <div class="cart-totoal-added-products">
              <p><span class="added-products-count">0</span> / <span class="total-products-count">0</span> products</p>
            </div>
          </div>

          <div class="side-cart-stepper">
            <div class="discount-stepper small">
              <div class="discount-stepper-item active">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
              <div class="discount-stepper-item active">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
              <div class="discount-stepper-item">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
              <div class="discount-stepper-item">
                <div class="discount-condition">
                  <p>1 product</p>
                </div>
                <div class="discount-value">
                  <p>15% off</p>
                </div>
              </div>
            </div>

            <div class="discount-info-container small">
              <div class="discount-info-container-header">
                <h3>
                  <svg width="19" height="24" viewBox="0 0 19 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M1.6 23.32C1.57333 23.3467 1.46667 23.3067 1.28 23.2C1.12 23.12 0.973333 23.0267 0.84 22.92C0.706667 22.8133 0.653333 22.7467 0.68 22.72L17.88 0.96C17.9333 0.879999 18.04 0.893333 18.2 1C18.36 1.08 18.5067 1.18666 18.64 1.32C18.7733 1.45333 18.8133 1.54667 18.76 1.6L1.6 23.32ZM13.08 23.2C11.8267 23.2 10.8667 22.7067 10.2 21.72C9.56 20.7067 9.37333 19.48 9.64 18.04C9.8 17.08 10.1333 16.2133 10.64 15.44C11.1467 14.6667 11.7733 14.0533 12.52 13.6C13.2667 13.1467 14.0533 12.92 14.88 12.92C16.1067 12.92 17.0267 13.4267 17.64 14.44C18.28 15.4533 18.4667 16.6667 18.2 18.08C17.9333 19.52 17.32 20.7333 16.36 21.72C15.4267 22.7067 14.3333 23.2 13.08 23.2ZM13.4 22.6C14.2 22.6 14.76 22.2 15.08 21.4C15.4267 20.6 15.68 19.5867 15.84 18.36C16.08 16.76 16.08 15.56 15.84 14.76C15.6267 13.9333 15.2 13.52 14.56 13.52C13.7867 13.52 13.2 13.9467 12.8 14.8C12.4267 15.6267 12.16 16.6533 12 17.88C11.76 19.2133 11.7333 20.3333 11.92 21.24C12.1067 22.1467 12.6 22.6 13.4 22.6ZM5.28 10.88C4.02667 10.88 3.08 10.3867 2.44 9.4C1.8 8.38667 1.61333 7.14667 1.88 5.68C2.04 4.74667 2.37333 3.89333 2.88 3.12C3.38667 2.34667 4.01333 1.73333 4.76 1.28C5.50667 0.826666 6.29333 0.6 7.12 0.6C8.37333 0.6 9.30667 1.10667 9.92 2.12C10.5333 3.13333 10.7067 4.36 10.44 5.8C10.1733 7.21333 9.56 8.41333 8.6 9.4C7.64 10.3867 6.53333 10.88 5.28 10.88ZM5.6 10.32C6.37333 10.32 6.92 9.92 7.24 9.12C7.58667 8.32 7.85333 7.30667 8.04 6.08C8.30667 4.48 8.32 3.26667 8.08 2.44C7.86667 1.61333 7.44 1.2 6.8 1.2C6 1.2 5.41333 1.62667 5.04 2.48C4.66667 3.33333 4.38667 4.36 4.2 5.56C3.98667 6.89333 3.97333 8.02667 4.16 8.96C4.34667 9.86667 4.82667 10.32 5.6 10.32Z" fill="white"/>
                  </svg>
                  Add 2 more items for maximum discount of 35%!
                </h3>
              </div>
            </div>
          </div>

          <div class="side-cart-product-container">
            <div class="side-cart-products">
            Cart empty
            </div>
          </div>

          <div class="side-cart-checkout">
            <div class="side-cart-checkout-wrapper">
              <div class="side-cart-checkout-item subtotal">
                <p>Subtotal</p>
                <p><span>$</span>100</p>
              </div>
              <div class="side-cart-checkout-item discount">
                <p>Discount</p>
                <p><span>$</span>100</p>
              </div>
              <div class="side-cart-checkout-item total">
                <p>Total</p>
                <p><span>$</span>100</p>
              </div>
            </div>
            <div class="side-cart-checkout-cta">
              <button>Add to Cart</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
const productId = {{ product.id }};
const base = '{{ shop.url }}';
const baseUrl = `${base}/apps/proxyTest`;
const shop_money_format = '{{ shop.money_format }}';

// Add this right after the shop_money_format constant declaration
if (!window.config) {
  window.config = {
    products: [],
    collections: [],
    collectionProducts: {}
  };
}

window.config.collectionProducts = {
  {%- for collection in collections -%}
    "{{ collection.id | replace: 'gid://shopify/Collection/', '' }}": [
      {%- for product in collection.products -%}
        {
          "id": "{{ product.id }}",
          "clean_id": {{ product.id | json }},
          "title": {{ product.title | json }},
          "price": {{ product.price }},
          "featured_image": {{ product.featured_image | img_url: 'medium' | json }},
          "url": {{ product.url | json }},
          "has_only_default_variant": {{ product.has_only_default_variant | json }},
          "options": {{ product.options_with_values | json }},
          "variants": {{ product.variants | json }}
        }
        {%- unless forloop.last -%},{%- endunless -%}
      {%- endfor -%}
    ]
    {%- unless forloop.last -%},{%- endunless -%}
  {%- endfor -%}
};

// Initialize products from collections
window.config.products = Object.values(window.config.collectionProducts)
  .flat()
  .map(product => ({
    ...product,
    id: String(product.id),
    clean_id: String(product.clean_id)
  }));

// Add this after window.config initialization
window.sideCart = {
  items: [],
  subtotal: 0,
  discount: 0,
  total: 0
};

function  fetchProductsFromDatabase(){
  // fetch(baseUrl, {
  //      method: 'GET',
  //      redirect: 'manual',
  //      headers: {
  //        'Content-Type': 'application/json',
  //         'origin': window.location.origin,
  //      }
  //    })
  //    .then(res => res.json())
  //    .then(data => {
  //       const resdata = {
  //         "message": {
  //             "bundle": 
  //                 {
  //                 "id": "cm4mco50w004j3gapayuiqcxk",
  //                 "productId": "gid://shopify/Product/9582675591475",
  //                 "bundleName": "test product byob bundle",
  //                 "bundleDescription": "test",
  //                 "products": "[]",
  //                 "isDiscountOptional": false,
  //                 "discountType": "tiered",
  //                 "discountValue": "",
  //                 "noDiscount": false,
  //                 "media": "[]",
  //                 "conditions": "[{\"id\":1,\"productCondition\":\"any\",\"productConditionNumber\":\"4\",\"productSelectionType\":\"product\",\"selectedProducts\":[{\"id\":\"gid://shopify/Product/9582674936115\",\"title\":\"About Time Dress\",\"handle\":\"about-time-dress\",\"image\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/ABOUTTIMEDRESS_MANGOMOJITOSTRIPE_3262.webp?v=1734070024\"},{\"id\":\"gid://shopify/Product/9582674444595\",\"title\":\"Ally Jogger in French Terry\",\"handle\":\"ally-pant\",\"image\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/ALLYPANT_CAMEOROSE_3040.webp?v=1734069801\"},{\"id\":\"gid://shopify/Product/9582674805043\",\"title\":\"Cameron Dress\",\"handle\":\"cameron-dress\",\"image\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/CAMERONDRESS_HEATHERGREY_2975.webp?v=1734069957\"},{\"id\":\"gid://shopify/Product/9582675231027\",\"title\":\"Carter Top\",\"handle\":\"carter-top\",\"image\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/CARTERTOP_MANGOMOJITO_4409.webp?v=1734070148\"},{\"id\":\"gid://shopify/Product/9582675001651\",\"title\":\"Steph Sweatshirt in Stripe Terry Cloth\",\"handle\":\"steph-sweatshirt-1\",\"image\":\"https://cdn.shopify.com/s/files/1/0915/6725/9955/files/STEPHSWEATSHIRT_MANGOMOJITOSTRIPE_2582.webp?v=1734070057\"}],\"selectedCollection\":null,\"chooseEachItemOnce\":false}]",
  //                 "tierBasedOn": "percentage",
  //                 "purchaseRequirement": "quantity",
  //                 "tiers": "[{\"id\":1734070207539,\"condition\":\"any\",\"requirement\":\"2\",\"value\":\"45\"},{\"id\":1734070258596,\"condition\":\"any\",\"requirement\":\"4\",\"value\":\"80\"}]",
  //                 "productStatus": "active",
  //                 "createdAt": "2024-12-13T06:11:16.977Z",
  //                 "updatedAt": "2024-12-16T11:42:24.889Z",
  //                 "showStepper": true,
  //                 "userId": "offline_byob-templates.myshopify.com"
  //             }
  //         }  
  //     }
  //    const productIds = extractProductIdsFromBundle(resdata);
  //    console.log(productIds);
  //    fetchProductsDataFromShopify(productIds);
  //    })
  //    .catch(error => {
  //      console.error('Error fetching products:', error);
  // });

  const resdata = {
          "message": {
              "bundle": 
              [
  {
    "id": 1734614437127,
    "productCondition": "any",
    "productConditionNumber": "1",
    "productSelectionType": "collection",
    "selectedProducts": [
      {
        "id": "gid://shopify/Product/9582676869427",
        "title": "Stitch Print Josette Dress",
        "handle": "stitch-print-josette-dress",
        "image": {
          "id": "gid://shopify/ProductImage/47762198659379",
          "originalSrc": "https://cdn.shopify.com/s/files/1/0915/6725/9955/files/STITCHPRINTJOSETTEDRESS_BLACK_0103.webp?v=1734070477"
        }
      },
      {
        "id": "gid://shopify/Product/9582677131571",
        "title": "Striped Poncho",
        "handle": "striped-poncho",
        "image": {
          "id": "gid://shopify/ProductImage/47762204361011",
          "altText": "Striped Poncho in Golden Brown Stripe",
          "originalSrc": "https://cdn.shopify.com/s/files/1/0915/6725/9955/files/STRIPEDPONCHO_GOLDENBROWNSTRIPE_1.webp?v=1734070507"
        }
      },
      {
        "id": "gid://shopify/Product/9582674575667",
        "title": "Summer Romper",
        "handle": "summer-romper",
        "image": {
          "id": "gid://shopify/ProductImage/47762090623283",
          "altText": "Summer Romper Heather Grey",
          "originalSrc": "https://cdn.shopify.com/s/files/1/0915/6725/9955/files/SUMMERROMPER_HEATHERGREY_4434.webp?v=1734069855"
        }
      },
      {
        "id": "gid://shopify/Product/9582675984691",
        "title": "Sun Birds Cali Hoodie",
        "handle": "wvn-for-you-x-art-by-ocha-sun-birds-cali-hoodie",
        "image": {
          "id": "gid://shopify/ProductImage/47762176377139",
          "altText": "WVN For You x Art By Ocha Sun Birds Cali Hoodie in Black",
          "originalSrc": "https://cdn.shopify.com/s/files/1/0915/6725/9955/files/SUNBIRDSCALIHOODIE_BLACK_1.webp?v=1734070354"
        }
      }
    ],
    "selectedCollection": {
      "id": "gid://shopify/Collection/486469304627",
      "title": "test",
      "productsCount": 5
    },
    "chooseEachItemOnce": false
  },
  {
    "id": 1734616660251,
    "productCondition": "any",
    "productConditionNumber": "1",
    "productSelectionType": "collection",
    "selectedProducts": [],
    "selectedCollection": {
      "id": "gid://shopify/Collection/486131237171",
      "title": "Home page",
      "productsCount": 2
    },
    "chooseEachItemOnce": false
  }
]
     }  
  }

      return resdata;
}

function extractProductDetailsFromBundle(data) {
  try {
    const bundles = data.message.bundle;
    let allProductItems = [];
    let allCollectionItems = [];
    
    // Handle both array and single object responses
    const bundleArray = Array.isArray(bundles) ? bundles : [bundles];
    
    bundleArray.forEach(bundle => {
      if (bundle.productSelectionType === "product" && 
          bundle.selectedProducts && 
          Array.isArray(bundle.selectedProducts)) {
        allProductItems = [...allProductItems, ...bundle.selectedProducts];
      }
      
      if (bundle.productSelectionType === "collection" && 
          bundle.selectedCollection) {
        allCollectionItems.push(bundle.selectedCollection);
      }
    });

    return {
      // If both types exist, prioritize products
      type: allProductItems.length > 0 ? 'product' : 'collection',
      products: allProductItems,
      collections: allCollectionItems
    };
  } catch (error) {
    console.error('Error extracting details:', error);
    return {
      type: 'product',
      products: [],
      collections: []
    };
  }
}

async function handleBundleData(bundleDetails) {
  try {
    const mainWrapper = document.querySelector('.main-wrapper');
    if (!mainWrapper) return;

    // Clear existing content
    mainWrapper.innerHTML = `
      <div class="collection-info-container">
        <div class="collection-info-container-header">
          <h3 data-bundle-header>Choose from available products</h3>
        </div>
        <div class="collection-info-container-content">
          <p data-bundle-description>Browse through our curated selection of products.</p>
        </div>
      </div>
    `;
    updateBundleText(bundleDetails);

    // Add collection links at the top
    if (bundleDetails.collections.length > 0) {
      mainWrapper.innerHTML += `
        <div class="collection-links-container">
          ${bundleDetails.collections.map((collection) => `
            <button class="collection-link" data-collection-id="${collection.id}">
              Collection: ${collection.title} (${collection.productsCount} Products)
            </button>
          `).join('')}
        </div>
      `;
    }

    // Render all collections vertically
    if (bundleDetails.collections.length > 0) {
      bundleDetails.collections.forEach((collection, index) => {
        mainWrapper.innerHTML += `
  <div class="collection-section" id="collection-${collection.id.replace('gid://shopify/Collection/', '')}">
    <h3 class="section-title"> Select from collection ${collection.title}</h3>
    <div class="collection-products-container">
      Loading collection products...
    </div>
  </div>
`;
      });

      // Render products for each collection
      bundleDetails.collections.forEach((collection) => {
        renderCollectionProductsVertical(collection);
      });
    }

    // Handle individual products if they exist
    if (bundleDetails.products.length > 0) {
      mainWrapper.innerHTML += `
        <div class="individual-products-section">
          <h3 class="section-title">Select from available products</h3>
          <div class="individual-products-container">
            Loading products...
          </div>
        </div>
      `;

      const productData = await fetchProductsDataFromShopify(bundleDetails.products);
      renderProductItems(productData, '.individual-products-container');
    }

    // Attach scroll event listeners
    attachCollectionLinkListeners();
    
  } catch (error) {
    console.error('Error handling bundle data:', error);
  }
}

function attachCollectionTabListeners(bundleDetails) {
  // Store collections data globally
  window.config.collections = bundleDetails.collections;
  
  const tabLinks = document.querySelectorAll('.tab-link-item');
  tabLinks.forEach(tab => {
    tab.addEventListener('click', function() {
      // Remove active class from all tabs
      tabLinks.forEach(t => t.classList.remove('active'));
      // Add active class to clicked tab
      this.classList.add('active');
      
      const collectionId = this.dataset.collectionId;
      const collection = window.config.collections.find(c => c.id === collectionId);
      
      if (collection) {
        // Update products count in header
        const productsCountElement = document.querySelector('.collection-products-container-header p');
        if (productsCountElement) {
          productsCountElement.textContent = `(${collection.productsCount} Products)`;
        }

        // Get collection handle from title
        const collectionHandle = collection.title.toLowerCase().replace(/[^a-z0-9]+/g, '-');
        const collectionProducts = window.config.collectionProducts[collectionHandle] || [];
        
        // Render products for this collection
        renderProductItems(collectionProducts);
      }
    });
  });
}

function updateBundleText(bundleDetails) {
  const headerElement = document.querySelector('[data-bundle-header]');
  const descriptionElement = document.querySelector('[data-bundle-description]');

  if (headerElement && descriptionElement) {
    if (bundleDetails.products.length > 0 && bundleDetails.collections.length > 0) {
      headerElement.textContent = 'Choose from selected products and collections';
      descriptionElement.textContent = 'Browse through our curated selection of products or explore collections.';
    } else if (bundleDetails.collections.length > 0) {
      headerElement.textContent = 'Choose products from collections';
      descriptionElement.textContent = 'Select collections to view all the available products.';
    } else {
      headerElement.textContent = 'Choose from selected products';
      descriptionElement.textContent = 'Browse through our curated selection of products.';
    }
  }
}

function formatMoney(cents, format) {
  if (typeof cents === 'string') cents = cents.replace('.', '');
  let value = '';
  let placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
  let formatString = format || formatF;

  function defaultOption(opt, def) {
    return (typeof opt == 'undefined' ? def : opt);
  }

  function formatWithDelimiters(number, precision, thousands, decimal) {
    precision = defaultOption(precision, 2);
    thousands = defaultOption(thousands, ',');
    decimal = defaultOption(decimal, '.');

  if (isNaN(number) || number == null) { return 0; }

    number = (number/100.0).toFixed(precision);

    const parts = number.split('.'),
      dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
      cents = parts[1] ? (decimal + parts[1]) : '';
      return dollars + cents;
    }
          
    switch(formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }
          
  return formatString.replace(placeholderRegex, value);
}

async function fetchProductsDataFromShopify(products) {
  try {
    const productData = await Promise.all(
      products.map(async (item) => {
        const handle = item.handle || item.url.split('/products/')[1];
        try {
          const response = await fetch(`/products/${handle}.js`);
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          const data = await response.json();
          
          // Ensure we have the complete product data structure
          return {
            ...data,
            id: data.id,
            title: data.title,
            handle: data.handle,
            featured_image: data.featured_image || item.image?.originalSrc || item.image,
            price: data.price,
            options: data.options || [],
            variants: data.variants || [],
            options_with_values: data.options_with_values || []
          };
        } catch (error) {
          console.error(`Error fetching product ${handle}:`, error);
          return null;
        }
      })
    );

    return productData.filter(product => product !== null);
  } catch (error) {
    console.error('Error fetching product data:', error);
    return [];
  }
}

function renderProductItems(productData, containerSelector = '.collection-products-container') {
  try {
    // Store products in window.config
    window.config.products = productData.map(product => ({
      ...product,
      id: String(product.id),
      clean_id: String(product.clean_id || product.id.replace('gid://shopify/Product/', ''))
    }));
    
    const productsContainer = document.querySelector(containerSelector);
    if (!productsContainer) {
      console.error(`Container not found: ${containerSelector}`);
      return;
    }
    
    productsContainer.innerHTML = `
      ${window.config.products.map(product => {
        const hasVariants = product.variants && product.variants.length > 0;
        const isMultipleVariants = hasVariants && product.variants.length > 1;
        const displayId = product.clean_id || product.id.replace('gid://shopify/Product/', '');
        
        return `
          <div class="product-card" data-product-id="${displayId}" data-has-variants="${hasVariants}">
            <div class="product-card-wrapper">
              <div class="product-card-image">
                <img
                  src="${product.featured_image}"
                  alt="${product.title}"
                  width="100%"
                  height="100%"
                >
              </div>

              <div class="product-card-content">
                <div class="product-card-top">
                  <div class="product-title">
                    <h4>${product.title}</h4>
                  </div>
                </div>

                <div class="product-card-mid">
                  <div class="product-price">
                    <p>${formatMoney(product.price, shop_money_format)}</p>
                  </div>
                </div>
              </div>
              
              <div class="product-card-cta">
                <div class="add-to-bundle">
                  <button class="variant-selector-trigger">
                    ${isMultipleVariants ? 'Select Options' : 'Add to Cart'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        `;
      }).join('')}
    `;

    attachProductEventListeners();
  } catch (error) {
    console.error('Error rendering products:', error);
  }
}

function renderCollectionProducts(collections) {
  try {
    // Extract collection ID from the GID format
    const collectionId = collections[0].id.split('/').pop();
    const collectionTitle = collections[0].title;

    // Find collection products by matching the collection title
    // This assumes the collection title matches the handle in the pre-loaded data
    const collectionHandle = collectionTitle.toLowerCase().replace(/[^a-z0-9]+/g, '-');
    const collectionProducts = window.config.collectionProducts[collectionHandle] || [];
    
    // Store products in window.config object for later use
    window.config.products = collectionProducts;
    
    const productsContainer = document.querySelector('.collection-products-container');
    if (!productsContainer) return;
    
    // Update products count in header
    const productsCountElement = document.querySelector('.collection-products-container-header p');
    if (productsCountElement) {
      productsCountElement.textContent = `(${collectionProducts.length} Products)`;
    }
    
    productsContainer.innerHTML = `
        ${collectionProducts.map(product => `
          <div class="product-card" data-product-id="${product.id}">
            <div class="product-card-wrapper">
              <div class="product-card-image">
                <img
                  src="${product.featured_image}"
                  alt="${product.title}"
                  width="100%"
                  height="100%"
                >
              </div>

              <div class="product-card-content">
                <div class="product-card-top">
                  <div class="product-title">
                    <h4>${product.title}</h4>
                  </div>
                </div>

                <div class="product-card-mid">
                  <div class="product-price">
                    <p>${formatMoney(product.price, shop_money_format)}</p>
                  </div>
                  <div class="product-available-variants">
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
              
              <div class="product-card-cta">
                <div class="add-to-bundle">
                  <button>Add to Cart</button>
                </div>
              </div>
            </div>
          </div>
        `).join('')}
    `;

    attachProductEventListeners();
  } catch (error) {
    console.error('Error rendering collection products:', error);
    console.error('Collection:', collection);
  }
}

function attachProductEventListeners() {
  console.log('Current window.config.products:', window.config.products); // Debug log

  document.querySelectorAll('.add-to-bundle button').forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      const productCard = this.closest('.product-card');
      if (!productCard) return;
      
      const productId = String(productCard.dataset.productId);
      const product = window.config.products.find(p => 
        String(p.id) === productId || 
        String(p.clean_id) === productId ||
        String(p.id).replace('gid://shopify/Product/', '') === productId
      );
      
      if (!product) {
        console.error('Product not found:', productId);
        return;
      }

      // If product has multiple variants, open the selector
      if (product.variants && product.variants.length > 1) {
        openVariantSelector(product, productCard);
      } else if (product.variants && product.variants.length === 1) {
        updateSideCart(product, product.variants[0]);
      }
    });
  });
}

function openVariantSelector(product, productCard) {
  console.log('Opening variant selector with product:', product);
  const variantSelector = document.querySelector('.product-variant-selector');
  if (!variantSelector) return;

  // Remove active state from all cards
  document.querySelectorAll('.product-card').forEach(card => {
    card.removeAttribute('data-active');
  });

  // Set active state on current card
  productCard.setAttribute('data-active', 'true');

  // Update product title
  const titleElement = variantSelector.querySelector('.product-variant-selector-header h3');
  if (titleElement) {
    titleElement.textContent = product.title;
  }

  // Check if product has options
  if (!product.options_with_values || !product.variants) {
    console.error('Fetching complete product data...');
    // Fetch complete product data if missing
    fetch(`/products/${product.handle}.js`)
      .then(response => response.json())
      .then(data => {
        product.options_with_values = data.options_with_values;
        product.variants = data.variants;
        populateVariantOptions(product, variantSelector);
      })
      .catch(error => console.error('Error fetching product data:', error));
  } else {
    populateVariantOptions(product, variantSelector);
  }

  // Show the popup
  variantSelector.classList.remove('closed');
}

function populateVariantOptions(product, variantSelector) {
  const colorContainer = variantSelector.querySelector('.color-items-container');
  const sizeContainer = variantSelector.querySelector('.size-items-container');
  
  // Clear existing options
  if (colorContainer) colorContainer.innerHTML = '';
  if (sizeContainer) sizeContainer.innerHTML = '';

  // Get unique options
  const options = product.options_with_values || [];
  
  options.forEach(option => {
    const isColor = option.name.toLowerCase().includes('color') || option.name.toLowerCase().includes('colour');
    const isSize = option.name.toLowerCase().includes('size');
    
    if (isColor && colorContainer) {
      colorContainer.innerHTML = option.values.map(value => `
        <div class="pvsc-item" data-value="${value}">
          <div class="pvsc-item-image">
            <div class="color-swatch" style="background-color: ${value.toLowerCase()}"></div>
          </div>
          <div class="pvsc-item-title">
            <h4>${value}</h4>
          </div>
        </div>
      `).join('');
    }
    
    if (isSize && sizeContainer) {
      sizeContainer.innerHTML = option.values.map(value => `
        <div class="pvsc-item" data-value="${value}">
          <div class="size">
            <p>${value}</p>
          </div>
        </div>
      `).join('');
    }
  });

  // Attach variant selection handlers
  attachVariantSelectionHandlers(product);
}

function attachVariantSelectionHandlers(product) {
  const variantSelector = document.querySelector('.product-variant-selector');
  const selectVariantButton = variantSelector?.querySelector('.product-variant-selector-cta button');
  
  if (selectVariantButton) {
    selectVariantButton.addEventListener('click', function() {
      const selectedColor = variantSelector.querySelector('.color-items-container .pvsc-item.selected')?.dataset.value;
      const selectedSize = variantSelector.querySelector('.size-items-container .pvsc-item.selected')?.dataset.value;
      
      // Find matching variant
      const selectedVariant = product.variants.find(variant => 
        (!selectedColor || variant.options.includes(selectedColor)) &&
        (!selectedSize || variant.options.includes(selectedSize))
      );

      if (selectedVariant) {
        const activeProductCard = document.querySelector('.product-card[data-active="true"]');
        if (activeProductCard) {
          updateSideCart(product, selectedVariant);
          variantSelector.classList.add('closed');
        }
      } else {
        console.error('No matching variant found');
      }
    });
  }

  // Add click handlers for color and size options
  variantSelector?.querySelectorAll('.pvsc-item').forEach(item => {
    item.addEventListener('click', function() {
      const container = this.closest('.pvsc-items-container');
      container.querySelectorAll('.pvsc-item').forEach(i => i.classList.remove('selected'));
      this.classList.add('selected');
    });
  });
}

function addToCart(productCard) {
  const productId = productCard.dataset.productId;
  // Clean the product ID by removing the Shopify GID prefix if present
  const cleanProductId = productId.replace('gid://shopify/Product/', '');
  const product = window.config.products.find(p => 
    String(p.id) === String(cleanProductId) || 
    String(p.id) === String(productId)
  );
  
  if (!product) {
    console.error('Product not found:', productId);
    return;
  }

  // Ensure variants exist
  if (!product.variants || product.variants.length === 0) {
    console.error('No variants found for product:', product.title);
    return;
  }

  // If product has only one variant, add it directly
  if (product.variants.length === 1) {
    updateSideCart(product, product.variants[0]);
    return;
  }

  // For products with multiple variants, open variant selector
  const variantSelectorTrigger = productCard.querySelector('.variant-selector-trigger');
  if (variantSelectorTrigger) {
    variantSelectorTrigger.click();
  }
}

// Add this function to manage side cart state
function updateSideCart(product, variant, quantity = 1) {
  if (!window.sideCart) {
    window.sideCart = {
      items: [],
      subtotal: 0,
      discount: 0,
      total: 0
    };
  }

  // Check if item already exists in cart
  const existingItemIndex = window.sideCart.items.findIndex(item => String(item.id) === String(variant.id));
  
  if (existingItemIndex !== -1) {
    // Update existing item
    const existingItem = window.sideCart.items[existingItemIndex];
    existingItem.quantity += quantity;
    window.sideCart.subtotal += variant.price * quantity;
  } else {
    // Create new cart item
    const cartItem = {
      id: variant.id,
      productId: product.id,
      title: product.title,
      image: product.featured_image,
      variant: {
        title: variant.title,
        options: variant.options || []
      },
      price: variant.price,
      quantity: quantity
    };

    window.sideCart.items.unshift(cartItem);
    window.sideCart.subtotal += variant.price * quantity;
  }

  window.sideCart.discount = calculateDiscount(window.sideCart.items);
  window.sideCart.total = window.sideCart.subtotal - window.sideCart.discount;

  renderSideCart();
}

function calculateDiscount(items) {
  // Implement your discount logic here
  // For now, returning a fixed discount
  return 1000; // $10.00
}

function renderSideCart() {
  const sideCartContainer = document.querySelector('.side-cart-products');
  if (!sideCartContainer) return;

  // Update cart count
  const addedProductsCount = document.querySelector('.added-products-count');
  if (addedProductsCount) {
    addedProductsCount.textContent = document.querySelector('.added-products-count');
  }

  // Render cart items
  sideCartContainer.innerHTML = window.sideCart.items.map(item => `
    <div class="sc-product-item" data-variant-id="${item.id}">
      <div class="scpt-image">
        <img
          src="${item.image}"
          alt="${item.title}"
          width="100%"
          height="100%"
        >
      </div>
      <div class="scpt-content">
        <div class="scpt-title">
          <h4>${item.title}</h4>
        </div>
        ${item.variant.color || item.variant.size ? `
          <div class="scpt-variant">
            <p>${[item.variant.color, item.variant.size].filter(Boolean).join('/')}</p>
          </div>
        ` : ''}
        <div class="scpt-price-wrapper">
          <div class="quantity-controls">
            <button class="quantity-btn minus" aria-label="Decrease quantity">-</button>
            <input 
              type="number" 
              class="quantity-input" 
              value="${item.quantity}"
              min="1"
              max="${item.inventory_quantity}"
              data-inventory="${item.inventory_quantity}"
              aria-label="Item quantity"
            >
            <button class="quantity-btn plus" aria-label="Increase quantity">+</button>
          </div>
          <div class="scpt-price new-price">
            <p><span>$</span>${(item.price / 100).toFixed(2)}</p>
          </div>
        </div>
      </div>

      <div class="scpt-remove-item">
        <button onclick="removeFromSideCart('${item.id}')">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="24" height="24" rx="12" fill="#0F0F0F"/>
            <path d="M14.8281 9.17188L9.17127 14.8287" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M9.17188 9.17188L14.8287 14.8287" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
      </div>
    </div>
  `).join('');

  // Update totals
  updateCartTotals();
  
  // Attach quantity event listeners
  attachQuantityListeners();
}

function removeFromSideCart(variantId) {
  if (!window.sideCart || !window.sideCart.items) return;

  // Convert both to strings for comparison
  const itemIndex = window.sideCart.items.findIndex(item => String(item.id) === String(variantId));

  if (itemIndex > -1) {
    const item = window.sideCart.items[itemIndex];
    // Subtract the item's price from subtotal
    window.sideCart.subtotal -= item.price * item.quantity;
    // Remove the item
    window.sideCart.items.splice(itemIndex, 1);
    // Recalculate discount
    window.sideCart.discount = calculateDiscount(window.sideCart.items);
    // Update total
    window.sideCart.total = window.sideCart.subtotal - window.sideCart.discount;
    // Re-render the cart
    renderSideCart();
  } else {
    console.error('Item not found in cart with variantId:', variantId);
  }
}

function updateCartTotals() {
  const subtotalElement = document.querySelector('.side-cart-checkout-item.subtotal p:last-child');
  const discountElement = document.querySelector('.side-cart-checkout-item.discount p:last-child');
  const totalElement = document.querySelector('.side-cart-checkout-item.total p:last-child');

  if (subtotalElement) {
    subtotalElement.innerHTML = `<span>$</span>${(window.sideCart.subtotal / 100).toFixed(2)}`;
  }
  if (discountElement) {
    discountElement.innerHTML = `<span>$</span>${(window.sideCart.discount / 100).toFixed(2)}`;
  }
  if (totalElement) {
    totalElement.innerHTML = `<span>$</span>${(window.sideCart.total / 100).toFixed(2)}`;
  }
}

function attachQuantityListeners() {
  document.querySelectorAll('.sc-product-item').forEach(item => {
    const minusBtn = item.querySelector('.quantity-btn.minus');
    const plusBtn = item.querySelector('.quantity-btn.plus');
    const input = item.querySelector('.quantity-input');
    const variantId = item.dataset.variantId;

    if (minusBtn && plusBtn && input) {
      // Prevent manual input changes
      input.addEventListener('keydown', (e) => {
        e.preventDefault();
        return false;
      });

      // Prevent direct input changes
      input.addEventListener('input', (e) => {
        e.preventDefault();
        const cartItem = window.sideCart.items.find(item => String(item.id) === String(variantId));
        if (cartItem) {
          e.target.value = cartItem.quantity;
        }
        return false;
      });

      minusBtn.addEventListener('click', (e) => {
        e.preventDefault();
        const currentQty = parseInt(input.value);
        updateItemQuantity(variantId, Math.max(1, currentQty - 1));
      });

      plusBtn.addEventListener('click', (e) => {
        e.preventDefault();
        const currentQty = parseInt(input.value);
        updateItemQuantity(variantId, currentQty + 1);
      });
    }
  });
}

function updateItemQuantity(variantId, newQuantity) {
  if (newQuantity < 1) return;

  const itemIndex = window.sideCart.items.findIndex(item => String(item.id) === String(variantId));
  if (itemIndex === -1) return;

  const item = window.sideCart.items[itemIndex];
  const oldQuantity = item.quantity;
  
  // Update item quantity
  item.quantity = newQuantity;
  
  // Update cart totals
  window.sideCart.subtotal += item.price * (newQuantity - oldQuantity);
  window.sideCart.discount = calculateDiscount(window.sideCart.items);
  window.sideCart.total = window.sideCart.subtotal - window.sideCart.discount;

  // Re-render cart
  renderSideCart();
}

function renderCollectionProductsVertical(collection) {
  try {
    // Clean the collection ID for use in selector
    const cleanId = collection.id.replace('gid://shopify/Collection/', '');
    
    // Find collection products by ID instead of title
    const collectionProducts = window.config.collectionProducts[cleanId] || [];
    
    const productsContainer = document.querySelector(`#collection-${cleanId} .collection-products-container`);
    if (!productsContainer) {
      console.error(`Container not found for collection: ${collection.title}`);
      return;
    }
    
    // Log for debugging
    console.log('Collection ID:', cleanId);
    console.log('Collection Products:', collectionProducts);
    
    productsContainer.innerHTML = `
        ${collectionProducts.map(product => `
          <div class="product-card" data-product-id="${product.id}">
            <div class="product-card-wrapper">
              <div class="product-card-image">
                <img
                  src="${product.featured_image}"
                  alt="${product.title}"
                  width="100%"
                  height="100%"
                >
              </div>

              <div class="product-card-content">
                <div class="product-card-top">
                  <div class="product-title">
                    <h4>${product.title}</h4>
                  </div>
                </div>

                <div class="product-card-mid">
                  <div class="product-price">
                    <p>${formatMoney(product.price, shop_money_format)}</p>
                  </div>
                  <div class="product-available-variants">
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
              
              <div class="product-card-cta">
                <div class="add-to-bundle">
                  <button>Add to Cart</button>
                </div>
              </div>
            </div>
          </div>
        `).join('')}
    `;

    attachProductEventListeners();
  } catch (error) {
    console.error('Error rendering collection products:', error);
    console.error('Collection:', collection);
  }
}

function attachCollectionLinkListeners() {
  const collectionLinks = document.querySelectorAll('.collection-link');
  collectionLinks.forEach(link => {
    link.addEventListener('click', function() {
      const collectionId = this.dataset.collectionId;
      // Clean the collection ID for use in selector
      const cleanId = collectionId.replace('gid://shopify/Collection/', '');
      const collectionSection = document.querySelector(`#collection-${cleanId}`);
      
      if (collectionSection) {
        collectionSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    });
  });
}

// In your main initialization code
document.addEventListener('DOMContentLoaded', function() {
  const bundleData = fetchProductsFromDatabase();
  const bundleDetails = extractProductDetailsFromBundle(bundleData);
  handleBundleData(bundleDetails);
  
  // Add close button functionality for variant selector
  const closeVariantSelector = document.querySelector('.close-variant-selector button');
  if (closeVariantSelector) {
    closeVariantSelector.addEventListener('click', function() {
      const variantSelector = document.querySelector('.product-variant-selector');
      if (variantSelector) {
        variantSelector.classList.add('closed');
      }
    });
  }
});
</script>

